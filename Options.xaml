<ResourceDictionary
    x:Class="PowerupsLite.When.Options"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:rules="clr-namespace:NINA.Core.Utility.ValidationRules;assembly=NINA.Core"
    xmlns:local="clr-namespace:PowerupsLite.When" >

    <!--  This data template will be displayed in N.I.N.A. on the options->plugin tab with the datacontext of the TestPlugin instance  -->
    <!--  In order for this datatemplate to be picked correctly, the key has to follow the naming convention of <IPlugin.Name>_Options -->
    <!--  Furthermore the Resource Dictionary has to be exported via code behind export attributes  -->

    <DataTemplate x:Key="Sequencer Powerups_Options">
        <StackPanel Orientation="Vertical">

            <StackPanel Orientation="Horizontal" Margin="0,12,0,0">
                <TextBlock VerticalAlignment="Center" Text="Roof status file: " />
                <TextBox
                    Margin="10,0,0,0"
                    MinWidth="300"
                    Grid.Column="1"
                    VerticalAlignment="Center"
                    VerticalContentAlignment="Center">
                    <TextBox.Text>
                        <Binding Path="RoofStatus" UpdateSourceTrigger="LostFocus">
                            <Binding.ValidationRules>
                                <rules:FileExistsOrEmptyRule />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <Button
                    Grid.Column="2"
                    Width="20"
                    Height="21"
                    Margin="5,0,0,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Command="{Binding OpenRoofFilePathDiagCommand}">
                    <Path
                        Margin="2,10,2,0"
                        Data="{StaticResource DotsSVG}"
                        Fill="{StaticResource ButtonForegroundBrush}"
                        Stretch="Uniform"
                        UseLayoutRounding="True" />
                </Button>
                <TextBlock Margin="15,0,0,0" VerticalAlignment="Center" Text="Open string: " ToolTip="A string to match indicating the roof is open"/>
                <TextBox Margin="10,0,0,0" MinWidth="60"  VerticalAlignment="Center" VerticalContentAlignment="Center" Text="{Binding RoofOpenString}" />
            </StackPanel>

            <StackPanel Orientation="Horizontal" Margin="0,15,0,0">
                    <TextBlock VerticalAlignment="Center" Text="Debug Logging: " />
                    <CheckBox
                        MinWidth="40"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        IsChecked="{Binding LogMode, Mode=TwoWay}" />
            </StackPanel>

        </StackPanel>
    </DataTemplate>

</ResourceDictionary>

<!--
    OpenHorizonFilePathDiagCommand = new RelayCommand(OpenHorizonFilePathDiag);
 
    public ICommand OpenHorizonFilePathDiagCommand { get; private set; }

      private void OpenHorizonFilePathDiag(object obj) {
          var dialog = GetFilteredFileDialog(string.Empty, string.Empty, "Horizon File|*.hrz;*.hzn;*.txt|MountWizzard4 Horizon File|*.hpts");
          if (dialog.ShowDialog() == true) {
              HorizonFilePath = dialog.FileName;
          }
      }

 
      public static Microsoft.Win32.OpenFileDialog GetFilteredFileDialog(string path, string filename, string filter) {
           Microsoft.Win32.OpenFileDialog dialog = new Microsoft.Win32.OpenFileDialog();

           if (File.Exists(path)) {
               dialog.InitialDirectory = Path.GetDirectoryName(path);
           }
           dialog.FileName = filename;
           dialog.Filter = filter;
           return dialog;
      }

   
-->
     