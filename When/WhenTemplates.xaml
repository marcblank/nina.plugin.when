<ResourceDictionary
    x:Class="WhenPlugin.When.WhenTemplates"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:cont="clr-namespace:NINA.Sequencer.Container;assembly=NINA.Sequencer"
    xmlns:filter="clr-namespace:NINA.Core.Model;assembly=NINA.Core"
    xmlns:local="clr-namespace:WhenPlugin.When"
    xmlns:mini="clr-namespace:NINA.View.Sequencer.MiniSequencer;assembly=NINA.Sequencer"
    xmlns:nina="clr-namespace:NINA.View.Sequencer;assembly=NINA.Sequencer"
    xmlns:ninactrl="clr-namespace:NINA.CustomControlLibrary;assembly=NINA.CustomControlLibrary"
    xmlns:ns="clr-namespace:NINA.Core.Locale;assembly=NINA.Core"
    xmlns:util="clr-namespace:NINA.Core.Utility;assembly=NINA.Core"
    xmlns:behaviors="clr-namespace:NINA.Sequencer.Behaviors;assembly=NINA.Sequencer"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors">

    <!--  This geometrygroup defines a custom SVG to be used with the plugin instruction  -->
    <GeometryGroup x:Key="Plugin_Test_SVG">
        <PathGeometry Figures="M 153.646,20.8542L 88.875,20.8542L 88.875,180.708L 64.7708,180.708L 64.7708,20.8542L -1.01725e-005,20.8542L -1.01725e-005,-0.5625L 153.646,-0.5625L 153.646,20.8542 Z " />
        <PathGeometry Figures="M 263.627,115.083L 163.44,115.083C 163.44,123.458 164.69,130.729 167.211,136.938C 169.711,143.146 173.169,148.25 177.544,152.229C 181.752,156.125 186.773,159.042 192.586,161C 198.377,162.958 204.773,163.917 211.773,163.917C 221.023,163.917 230.336,162.083 239.711,158.375C 249.086,154.688 255.752,151.063 259.732,147.479L 260.94,147.479L 260.94,172.438C 253.232,175.688 245.357,178.396 237.315,180.583C 229.273,182.771 220.836,183.875 212.002,183.875C 189.44,183.875 171.836,177.771 159.169,165.563C 146.502,153.354 140.169,136 140.169,113.5C 140.169,91.2708 146.232,73.625 158.377,60.5417C 170.502,47.4792 186.482,40.9375 206.294,40.9375C 224.627,40.9375 238.752,46.3125 248.711,57.0208C 258.648,67.7292 263.627,82.9583 263.627,102.667L 263.627,115.083 Z M 241.357,97.5625C 241.273,85.5625 238.232,76.2708 232.273,69.6875C 226.315,63.1042 217.232,59.8125 205.065,59.8125C 192.815,59.8125 183.044,63.4375 175.794,70.6458C 168.523,77.875 164.398,86.8542 163.44,97.5625L 241.357,97.5625 Z " />
        <PathGeometry Figures="M 395.425,141.5C 395.425,153.917 390.28,164.104 380.03,172.063C 369.759,180.021 355.738,184 337.967,184C 327.905,184 318.675,182.792 310.28,180.417C 301.863,178.021 294.821,175.396 289.155,172.542L 289.155,146.854L 290.363,146.854C 297.571,152.313 305.613,156.625 314.467,159.833C 323.3,163.042 331.8,164.646 339.925,164.646C 349.967,164.646 357.842,163.021 363.53,159.771C 369.196,156.521 372.05,151.417 372.05,144.438C 372.05,139.083 370.509,135.021 367.425,132.25C 364.342,129.5 358.405,127.146 349.655,125.188C 346.405,124.479 342.155,123.625 336.925,122.646C 331.696,121.667 326.925,120.604 322.634,119.479C 310.696,116.313 302.238,111.667 297.238,105.542C 292.238,99.4167 289.759,91.875 289.759,82.9375C 289.759,77.3542 290.905,72.0833 293.217,67.125C 295.53,62.1667 299.05,57.75 303.759,53.8542C 308.3,50.0417 314.071,47.0208 321.092,44.7917C 328.113,42.5625 335.967,41.4375 344.675,41.4375C 352.78,41.4375 360.988,42.4375 369.321,44.4167C 377.634,46.4167 384.55,48.8333 390.071,51.6667L 390.071,76.125L 388.863,76.125C 383.009,71.8333 375.905,68.1875 367.55,65.2292C 359.175,62.2708 350.988,60.7917 342.967,60.7917C 334.592,60.7917 327.53,62.3958 321.78,65.6042C 316.009,68.8125 313.134,73.5833 313.134,79.8958C 313.134,85.5208 314.863,89.7292 318.363,92.5625C 321.78,95.4167 327.3,97.7292 334.925,99.5C 339.134,100.479 343.863,101.458 349.113,102.438C 354.342,103.417 358.696,104.313 362.196,105.104C 372.821,107.542 381.03,111.729 386.8,117.646C 392.55,123.646 395.425,131.604 395.425,141.5 Z " />
        <PathGeometry Figures="M 498.653,179.5C 494.361,180.625 489.673,181.542 484.59,182.292C 479.507,183.021 474.986,183.396 471.028,183.396C 457.153,183.396 446.59,179.667 439.361,172.188C 432.132,164.729 428.528,152.75 428.528,136.271L 428.528,63.9583L 413.069,63.9583L 413.069,44.7292L 428.528,44.7292L 428.528,5.64583L 451.423,5.64583L 451.423,44.7292L 498.653,44.7292L 498.653,63.9583L 451.423,63.9583L 451.423,125.917C 451.423,133.083 451.569,138.667 451.903,142.667C 452.236,146.688 453.361,150.438 455.319,153.917C 457.111,157.167 459.569,159.542 462.694,161.042C 465.819,162.542 470.569,163.292 476.986,163.292C 480.715,163.292 484.611,162.75 488.673,161.667C 492.715,160.583 495.653,159.667 497.444,158.917L 498.653,158.917L 498.653,179.5 Z " />
    </GeometryGroup>


    <DataTemplate DataType="{x:Type local:InterruptTrigger}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Border
                        Grid.Row="1"
                        MinHeight="65"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding TriggerRunner}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Interrupt instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.TemplatedSequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander>

            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <!--<DataTemplate DataType="{x:Type local:InterruptWait}">
        <nina:SequenceBlockView>
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>-->

    <DataTemplate DataType="{x:Type local:SetConstant}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="Name:" />
                    <TextBox
                        MinWidth="40"
                        Margin="5,0,10,0"
                        Text="{Binding Constant}"
                        TextAlignment="Center" />
                    <TextBlock VerticalAlignment="Center" Text="Value:" />
                    <TextBox
                        MinWidth="40"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding ValueExpr}"
                        TextAlignment="Right" />
                    <TextBlock
                        Margin="7.5,0,0,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="(" />
                    <TextBlock
                        Foreground="{Binding IsValidValue}" 
                        Margin="0,0,0,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="{Binding ValueString}" />
                    <TextBlock
                        Margin="0,0,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text=")" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:Retry}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="# of Retries:" />
                    <TextBox
                        MinWidth="40"
                        Margin="5,0,10,0"
                        Text="{Binding Iterations}"
                        TextAlignment="Center" />
                 </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
            <nina:SequenceBlockView.SequenceItemProgressContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{ns:Loc LblIterations}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center">/</TextBlock>
                    <TextBlock VerticalAlignment="Center" Text="{Binding Iterations}" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemProgressContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <!--  The definition of the plugin test instruction style  -->
    <!--  The DataType has to be defined as the instruction in context  --><!--
    <DataTemplate DataType="{x:Type local:PrependToLastImage}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="Prefix:" />
                    <TextBox
                        MinWidth="100"
                        Margin="5,0,10,0"
                        Text="{Binding Prepend}"
                        TextAlignment="Center" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:IfResults}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <ninactrl:DetachingExpander.Header>
                        <Border
                                MinHeight="35"
                                BorderBrush="{StaticResource BorderBrush}"
                                BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Condition}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instruction providing results goes here"
                                TextAlignment="Center"
                                MinWidth="400"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                </i:Interaction.Behaviors>
                            </Grid>
                            <i:Interaction.Behaviors>
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="WhenPlugin.When.IInstructionResults, WhenPlugin, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null" OnDropCommand="DropIntoIfCommand" />
                            </i:Interaction.Behaviors>
                        </Border>
                    </ninactrl:DetachingExpander.Header>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <StackPanel Orientation="Horizontal">
                            <TextBlock VerticalAlignment="Center" Margin="0,10,10,10" Text="Enter an expression using the results of the instruction:" />
                            <TextBox
                                    MinWidth="300"
                                    Margin="5,0,10,0"
                                    Text="{Binding Predicate}"
                                    VerticalAlignment="Center"
                                    TextAlignment="Left" />
                        </StackPanel>
                        <Border
                        Grid.Row="1"
                        MinHeight="35"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Conditional instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.SequenceItem.ISequenceItem;" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander>

            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>-->

    <!--<DataTemplate DataType="{x:Type local:IfSwitch}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <ninactrl:DetachingExpander.Header>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock VerticalAlignment="Center" Margin="0,3,0,0" Text="Enter an expression using the available switch/weather values:" />
                            <TextBox
                                    MinWidth="300"
                                    Margin="5,5,10,0"
                                    Text="{Binding Predicate}"
                                    ToolTip="Foo"
                                    ToolTipOpening="IfSwitch_PredicateToolTip"
                                    VerticalAlignment="Center"
                                    TextAlignment="Left" />
                            <Grid Grid.Column="1" Visibility="Visible">
                                <Border
                                Width="20"
                                Height="20"
                                Margin="5,2,5,0"
                                Background="{StaticResource NotificationErrorBrush}"
                                BorderBrush="Transparent"
                                CornerRadius="10">
                                    <Border.Visibility>
                                        <PriorityBinding>
                                            <Binding
                                            Converter="{StaticResource ZeroToVisibilityConverter}"
                                            FallbackValue="Collapsed"
                                            Path="Switches.Count" />
                                        </PriorityBinding>
                                    </Border.Visibility>
                                    <Path
                                    HorizontalAlignment="Right"
                                    Data="{StaticResource AboutSVG}"
                                    Fill="{StaticResource ButtonForegroundBrush}"
                                    Stretch="Uniform" />
                                    <Border.ToolTip>
                                        <ItemsControl ItemsSource="{Binding Switches}" />
                                    </Border.ToolTip>
                                </Border>
                            </Grid>
                        </StackPanel>
                    </ninactrl:DetachingExpander.Header>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Border
                        Grid.Row="1"
                        MinHeight="35"
                        Margin="0,10,0,10"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Conditional instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.SequenceItem.ISequenceItem;" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander>

            </nina:SequenceBlockView.SequenceItemContent>
         </nina:SequenceBlockView>
    </DataTemplate>-->

    <DataTemplate DataType="{x:Type local:IfFailed}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <ninactrl:DetachingExpander.Header>
                        <Border
                                MinHeight="35"
                                BorderBrush="{StaticResource BorderBrush}"
                                BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Condition}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instruction to check goes here"
                                TextAlignment="Center"
                                MinWidth="400"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                </i:Interaction.Behaviors>
                            </Grid>
                            <i:Interaction.Behaviors>
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.SequenceItem.ISequenceItem" OnDropCommand="DropIntoIfCommand" />
                            </i:Interaction.Behaviors>
                        </Border>
                    </ninactrl:DetachingExpander.Header>
                    <StackPanel Orientation="Vertical">
                        <TextBlock
                                MinHeight="30"
                                HorizontalAlignment="Left"
                                Margin="0,10,0,-20"
                                VerticalAlignment="Center"
                                Opacity="0.4"
                                Text="Instructions to execute if the instruction fails:" />
                        <Border
                        MinHeight="35"
                        Margin="0,20,0,0"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </StackPanel>
                </ninactrl:DetachingExpander>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:IfSafe}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <StackPanel Orientation="Vertical">
                        <TextBlock
                                MinHeight="30"
                                HorizontalAlignment="Left"
                                Margin="0,10,0,-20"
                                VerticalAlignment="Center"
                                Opacity="0.4"
                                Text="Instructions to execute if your gear is 'safe':" />
                        <Border
                        MinHeight="35"
                        Margin="0,20,0,0"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </StackPanel>
                </ninactrl:DetachingExpander>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>
 
    <DataTemplate DataType="{x:Type local:TemplateByReference}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <ninactrl:DetachingExpander.Header>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock
                                MinHeight="30"
                                HorizontalAlignment="Left"
                                Margin="10,10,10,0"
                                VerticalAlignment="Center"
                                Opacity="0.4"
                                Text="Template Name:" />
                            <ComboBox
                                Height="24"
                                Margin="10,-4,0,0"
                                DisplayMemberPath="Container.Name"
                                ItemsSource="{Binding SortedTemplates}"
                                SelectedItem="{Binding SelectedTemplate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                SelectedValuePath="Container.Name" />
                        </StackPanel>
                    </ninactrl:DetachingExpander.Header>

                    <StackPanel Orientation="Vertical">
                    <Border
                        MinHeight="35"
                        Margin="0,20,0,0"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="The specified template will go here..."
                                Visibility="{Binding TemplateName, Converter={StaticResource BooleanToVisibilityHiddenConverter}}"/>
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoTemplateCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </StackPanel>
                </ninactrl:DetachingExpander>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:WhenUnsafe}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock
                                MinHeight="20"
                                HorizontalAlignment="Left"
                                Margin="0,10,0,-20"
                                VerticalAlignment="Center"
                                Opacity="0.4"
                                MinWidth="400"
                                Text="Instructions to execute when your gear becomes 'unsafe':" />
                            <Button
                                MinHeight="20"
                                Margin="5,20,0,0"
                                Width="100"
                                VerticalAlignment="Bottom"
                                HorizontalAlignment="Stretch"
                                Visibility="{Binding InFlight, Converter={StaticResource BooleanToVisibilityHiddenConverter}}"
                                Command="{Binding StopInstructions}">
                                <TextBlock
                                    Foreground="{StaticResource ButtonForegroundBrush}"
                                    Text="{Binding StartStop}"
                                    TextWrapping="Wrap" />
                            </Button>
                        </StackPanel>
                        <Border
                        MinHeight="35"
                        Margin="0,20,0,0"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </StackPanel>
                </ninactrl:DetachingExpander>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:WaitIndefinitely}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock
                        MinHeight="20"
                        HorizontalAlignment="Left"
                        Margin="0,0,0,-20"
                        Visibility="{Binding InFlight, Converter={StaticResource BooleanToVisibilityHiddenConverter}}"
                        VerticalAlignment="Top"
                        Opacity="0.4"
                        MinWidth="200"
                        Text="Click this button to terminate the wait:" />
                    <Button
                        MinHeight="20"
                        Margin="5,-2,0,0"
                        Width="100"
                        VerticalAlignment="Top"
                        HorizontalAlignment="Stretch"
                        Visibility="{Binding InFlight, Converter={StaticResource BooleanToVisibilityHiddenConverter}}"
                        Command="{Binding StopInstructions}">
                        <TextBlock
                            Foreground="{StaticResource ButtonForegroundBrush}"
                            Text="Stop"
                            TextWrapping="Wrap" />
                    </Button>
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

   

    <DataTemplate DataType="{x:Type local:IfUnsafe}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <StackPanel Orientation="Vertical">
                        <TextBlock
                                MinHeight="30"
                                HorizontalAlignment="Left"
                                Margin="0,10,0,-20"
                                VerticalAlignment="Center"
                                Opacity="0.4"
                                Text="Instructions to execute if your gear is 'unssafe':" />
                        <Border
                        MinHeight="35"
                        Margin="0,20,0,0"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </StackPanel>
                </ninactrl:DetachingExpander>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate x:Key="NINA.Plugins.Generics.Instructions.GenericTrigger_Mini">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <TextBlock />
            </mini:MiniSequenceItem.SequenceItemContent>
        </mini:MiniSequenceItem>
    </DataTemplate>

    <WrapPanel x:Key="IfBlock">
        <ninactrl:DetachingExpander>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Margin="5,0,10,0" Text="Predicate expression:" />
                    <TextBox
                                    MinWidth="150"
                                    Margin="5,0,10,0"
                                    Text="{Binding Predicate}"
                                    VerticalAlignment="Center"
                                    TextAlignment="Left" />
                </StackPanel>
                <Border
                        Grid.Row="1"
                        MinHeight="35"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                    <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                        <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                        <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Margin="5,0,10,0"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Conditional instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                        <i:Interaction.Behaviors>
                            <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                            <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.SequenceItem.ISequenceItem;" OnDropCommand="DropIntoCommand" />
                        </i:Interaction.Behaviors>
                    </Grid>
                </Border>
            </Grid>
        </ninactrl:DetachingExpander>
    </WrapPanel>



    <WrapPanel
        x:Key="TakeExposureDetails"
        x:Shared="false"
        Orientation="Horizontal">
        <WrapPanel.Resources>
            <util:BindingProxy x:Key="CameraInfo" Data="{Binding CameraInfo}" />
        </WrapPanel.Resources>
        <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblTime}" />
        <ninactrl:UnitTextBox
            MinWidth="40"
            Margin="5,0,0,0"
            VerticalAlignment="Center"
            VerticalContentAlignment="Center"
            Text="{Binding ExposureTimeExpr}"
            TextAlignment="Right"
            Unit="s" />

        <TextBlock
            Margin="7.5,0,0,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Text="(" />
        <TextBlock
            Foreground="{Binding IsValidExposureTime}"  
            Margin="0,0,0,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Text="{Binding ExposureTimeString}" />
        <TextBlock
            Margin="0,0,7.5,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Text=")" />
        <TextBlock
            Margin="7.5,0,7.5,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Text="|" />

        <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblType}" />
        <ComboBox
            Margin="5,0,0,0"
            ItemsSource="{Binding ImageTypes}"
            SelectedItem="{Binding ImageType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

        <TextBlock
            Margin="7.5,0,7.5,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Text="|" />

        <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblBinning}" />
        <ComboBox
            Margin="5,0,0,0"
            DisplayMemberPath="Name"
            ItemsSource="{Binding Source={StaticResource CameraInfo}, Path=Data.BinningModes, Converter={StaticResource DefaultBinningModesConverter}}"
            SelectedItem="{Binding Binning, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
            SelectedValuePath="Name" />

        <!--  List of Gain  -->
        <WrapPanel Orientation="Horizontal">
            <WrapPanel.Visibility>
                <PriorityBinding>
                    <Binding
                        Converter="{StaticResource CollectionContainsItemsToVisibilityConverter}"
                        Path="Data.Gains"
                        Source="{StaticResource CameraInfo}" />
                    <Binding
                        Converter="{StaticResource BooleanToVisibilityCollapsedConverter}"
                        Path="Data.Connected"
                        Source="{StaticResource CameraInfo}" />
                </PriorityBinding>
            </WrapPanel.Visibility>
            <TextBlock
                Margin="7.5,0,7.5,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Text="|" />
            <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblGain}" />
            <ComboBox
                Margin="5,0,0,0"
                DisplayMemberPath="Text"
                IsSynchronizedWithCurrentItem="True"
                SelectedValuePath="Text">
                <ComboBox.ItemsSource>
                    <CompositeCollection>
                        <TextBlock Text="{Binding Source={StaticResource CameraInfo}, Path=Data.DefaultGain, UpdateSourceTrigger=PropertyChanged, StringFormat=({0})}" />
                        <CollectionContainer Collection="{Binding Source={StaticResource CameraInfo}, Path=Data.Gains, Converter={StaticResource IntListToTextBlockListConverter}}" />
                    </CompositeCollection>
                </ComboBox.ItemsSource>
                <ComboBox.SelectedValue>
                    <MultiBinding
                        Converter="{StaticResource MinusOneToBaseValueConverter}"
                        Mode="TwoWay"
                        UpdateSourceTrigger="PropertyChanged">
                        <Binding
                            Mode="TwoWay"
                            Path="Gain"
                            UpdateSourceTrigger="PropertyChanged" />
                        <Binding
                            Mode="OneWay"
                            Path="Data.DefaultGain"
                            Source="{StaticResource CameraInfo}"
                            UpdateSourceTrigger="PropertyChanged" />
                    </MultiBinding>
                </ComboBox.SelectedValue>
            </ComboBox>
        </WrapPanel>

        <!--  Free Gain  -->
        <WrapPanel Orientation="Horizontal">
            <WrapPanel.Visibility>
                <PriorityBinding FallbackValue="Visible">
                    <Binding
                        Converter="{StaticResource InverseCollectionContainsItemsToVisibilityConverter}"
                        Path="Data.Gains"
                        Source="{StaticResource CameraInfo}" />
                </PriorityBinding>
            </WrapPanel.Visibility>
            <TextBlock
                Margin="7.5,0,7.5,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Text="|" />
            <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblGain}" />
            <ninactrl:HintTextBox
                MinWidth="40"
                Margin="5,0,0,0"
                VerticalAlignment="Center"
                HorizontalContentAlignment="Right"
                VerticalContentAlignment="Center"
                Foreground="{StaticResource PrimaryBrush}"
                TextAlignment="Right">
                <ninactrl:HintTextBox.HintText>
                    <Binding
                        Converter="{StaticResource CameraDefaultValueConverter}"
                        Mode="OneWay"
                        Path="Data.DefaultGain"
                        Source="{StaticResource CameraInfo}"
                        UpdateSourceTrigger="PropertyChanged" />
                </ninactrl:HintTextBox.HintText>
                <ninactrl:HintTextBox.Text>
                    <Binding
                        Converter="{StaticResource MinusOneToEmptyStringConverter}"
                        Mode="TwoWay"
                        Path="Gain"
                        UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <util:ShortRangeRule>
                                <util:ShortRangeRule.ValidRange>
                                    <util:ShortRangeChecker Maximum="32767" Minimum="-1" />
                                </util:ShortRangeRule.ValidRange>
                            </util:ShortRangeRule>
                        </Binding.ValidationRules>
                    </Binding>
                </ninactrl:HintTextBox.Text>
            </ninactrl:HintTextBox>
        </WrapPanel>

        <!--  Offset  -->
        <WrapPanel Orientation="Horizontal">
            <WrapPanel.Visibility>
                <MultiBinding Converter="{StaticResource BooleanOrToVisibilityCollapsedMultiConverter}" FallbackValue="Visible">
                    <Binding
                        Converter="{StaticResource InverseBooleanConverter}"
                        Path="Data.Connected"
                        Source="{StaticResource CameraInfo}" />
                    <Binding Path="Data.CanSetOffset" Source="{StaticResource CameraInfo}" />
                </MultiBinding>
            </WrapPanel.Visibility>
            <TextBlock
                Margin="7.5,0,7.5,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Text="|" />
            <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblOffset}" />
            <ninactrl:HintTextBox
                MinWidth="40"
                Margin="5,0,0,0"
                VerticalAlignment="Center"
                HorizontalContentAlignment="Right"
                VerticalContentAlignment="Center"
                Foreground="{StaticResource PrimaryBrush}"
                TextAlignment="Right">
                <ninactrl:HintTextBox.HintText>
                    <Binding
                        Converter="{StaticResource CameraDefaultValueConverter}"
                        Mode="OneWay"
                        Path="Data.DefaultOffset"
                        Source="{StaticResource CameraInfo}"
                        UpdateSourceTrigger="PropertyChanged" />
                </ninactrl:HintTextBox.HintText>
                <ninactrl:HintTextBox.Text>
                    <Binding
                        Converter="{StaticResource MinusOneToEmptyStringConverter}"
                        Mode="TwoWay"
                        Path="Offset"
                        UpdateSourceTrigger="PropertyChanged">
                        <Binding.ValidationRules>
                            <util:ShortRangeRule>
                                <util:ShortRangeRule.ValidRange>
                                    <util:ShortRangeChecker Maximum="32767" Minimum="-1" />
                                </util:ShortRangeRule.ValidRange>
                            </util:ShortRangeRule>
                        </Binding.ValidationRules>
                    </Binding>
                </ninactrl:HintTextBox.Text>
            </ninactrl:HintTextBox>
        </WrapPanel>
    </WrapPanel>

    <!--<DataTemplate x:Key="WhenPlugin.When.TakeExposure_Mini">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{Binding ExposureTime}" />
                    <TextBlock VerticalAlignment="Center" Text="s" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
        </mini:MiniSequenceItem>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:TakeExposure}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <WrapPanel Orientation="Vertical">
                    <ContentPresenter Content="{StaticResource TakeExposureDetails}" />
                </WrapPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>-->

    <!--<DataTemplate x:Key="WhenPlugin.When.TakeManyExposures_Mini" DataType="{x:Type local:SmartExposure}">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                    <TextBlock VerticalAlignment="Center" Text="x" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Items[0].ExposureTime}" />
                    <TextBlock VerticalAlignment="Center" Text="s" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
            <mini:MiniSequenceItem.SequenceItemProgressContent>
                <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblProgress}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Conditions[0].CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center" Text="/" />
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemProgressContent>
        </mini:MiniSequenceItem>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:TakeManyExposures}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <WrapPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="#" />
                    <TextBox
                        MinWidth="40"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding IterationsExpr}"
                        TextAlignment="Right" />
                    <TextBlock
                        Margin="7.5,0,0,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="(" />
                    <TextBlock
                        Foreground="{Binding IsValidIterationCount}" 
                        Margin="0,0,0,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="{Binding IterationCountString}" />
                    <TextBlock
                        Margin="0,0,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text=")" />
                    <TextBlock
                        Margin="7.5,0,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="|" />

                    <ContentPresenter Content="{StaticResource TakeExposureDetails}" DataContext="{Binding Items[0]}" />
                </WrapPanel>
            </nina:SequenceBlockView.SequenceItemContent>
            <nina:SequenceBlockView.SequenceItemProgressContent>
                <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblProgress}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Conditions[0].CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center" Text="/" />
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemProgressContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.SmartExposure_Mini" DataType="{x:Type local:SmartExposure}">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                    <TextBlock VerticalAlignment="Center" Text="x" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Items[0].Filter.Name}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Items[1].ExposureTime}" />
                    <TextBlock VerticalAlignment="Center" Text="s" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
            <mini:MiniSequenceItem.SequenceItemProgressContent>
                <WrapPanel VerticalAlignment="Center" Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblProgress}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Conditions[0].CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center" Text="/" />
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                </WrapPanel>
            </mini:MiniSequenceItem.SequenceItemProgressContent>
        </mini:MiniSequenceItem>
    </DataTemplate>
    <DataTemplate DataType="{x:Type local:SmartExposure}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>

                <WrapPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="#" />
                    <TextBox
                        MinWidth="40"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding IterationsExpr}"
                        TextAlignment="Right" />
                    <TextBlock
                        Margin="7.5,0,0,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="(" />
                    <TextBlock
                        Foreground="{Binding IsValidSmartIterationCount}"
                        Margin="0,0,0,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="{Binding IterationCountString}" />
                    <TextBlock
                        Margin="0,0,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text=")" />
                    <TextBlock
                        Margin="7.5,0,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="|" />
                    <ContentPresenter Content="{StaticResource TakeExposureDetails}" DataContext="{Binding Items[1]}" />

                    <TextBlock
                        Margin="7.5,0,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="|" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{ns:Loc LblFilter}" />
                    <ComboBox
                        Margin="5,0,0,0"
                        DisplayMemberPath="Name"
                        SelectedItem="{Binding Items[0].Filter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource FilterWheelFilterConverter}}"
                        SelectedValuePath="Name">
                        <ComboBox.Resources>
                            <CollectionViewSource x:Key="Filters" Source="{Binding Source={StaticResource ProfileService}, Path=ActiveProfile.FilterWheelSettings.FilterWheelFilters}" />
                        </ComboBox.Resources>
                        <ComboBox.ItemsSource>
                            <CompositeCollection>
                                <x:Static Member="filter:NullFilter.Instance" />
                                <CollectionContainer Collection="{Binding Source={StaticResource Filters}}" />
                            </CompositeCollection>
                        </ComboBox.ItemsSource>
                    </ComboBox>
                    <TextBlock
                        Margin="7.5,0,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="|" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{ns:Loc LblDitherEveryNoFrame}" />
                    <TextBox
                        MinWidth="40"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding DitherExpr}"
                        TextAlignment="Right">
                        <TextBox.ToolTip>
                            <TextBlock VerticalAlignment="Center" Text="{ns:Loc Lbl_SequenceItem_Imaging_SmartExposure_DitherTooltip}" />
                        </TextBox.ToolTip>
                    </TextBox>
                    <TextBlock
                        Margin="7.5,0,0,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="(" />
                    <TextBlock
                        Foreground="{Binding IsValidDitherCount}" 
                        Margin="0,0,0,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="{Binding DitherCountString}" />
                    <TextBlock
                        Margin="0,0,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text=")" />
                 </WrapPanel>
            </nina:SequenceBlockView.SequenceItemContent>
            <nina:SequenceBlockView.SequenceItemProgressContent>
                <WrapPanel VerticalAlignment="Center" Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblProgress}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Conditions[0].CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center" Text="/" />
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                </WrapPanel>
            </nina:SequenceBlockView.SequenceItemProgressContent>
        </nina:SequenceBlockView>
    </DataTemplate>-->





</ResourceDictionary>