<ResourceDictionary
    x:Class="WhenPlugin.When.WhenTemplates"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:cont="clr-namespace:NINA.Sequencer.Container;assembly=NINA.Sequencer"
    xmlns:filter="clr-namespace:NINA.Core.Model;assembly=NINA.Core"
    xmlns:local="clr-namespace:WhenPlugin.When"
    xmlns:mini="clr-namespace:NINA.View.Sequencer.MiniSequencer;assembly=NINA.Sequencer"
    xmlns:nina="clr-namespace:NINA.View.Sequencer;assembly=NINA.Sequencer"
    xmlns:ninactrl="clr-namespace:NINA.CustomControlLibrary;assembly=NINA.CustomControlLibrary"
    xmlns:ns="clr-namespace:NINA.Core.Locale;assembly=NINA.Core"
    xmlns:util="clr-namespace:NINA.Core.Utility;assembly=NINA.Core"
    xmlns:behaviors="clr-namespace:NINA.Sequencer.Behaviors;assembly=NINA.Sequencer"
    xmlns:wpfutil="clr-namespace:NINA.WPF.Base.Utility;assembly=NINA.WPF.Base"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors">

    <local:ExpressionConverter x:Key="ec" />

    <ControlTemplate x:Key="PowerupsButtons">
            <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
            <Button
                    Width="25"
                    Height="25"
                    Margin="25,0,0,0"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Command="{Binding ResetProgressCommand}"
                    Style="{StaticResource SecondaryBackgroundButton}"
                    Visibility="{Binding DetachCommand, Converter={StaticResource NullToVisibilityCollapsedConverter}}">
                <Grid>
                    <Path
                            Margin="5"
                            Data="{StaticResource RefreshSVG}"
                            Fill="{StaticResource ButtonForegroundBrush}"
                            Stretch="Uniform"
                            UseLayoutRounding="True" />
                </Grid>
                <Button.ToolTip>
                    <ToolTip>
                        <TextBlock Foreground="{StaticResource PrimaryBrush}" Text="{ns:Loc Lbl_SequenceContainer_Reset_Tooltip}" />
                    </ToolTip>
                </Button.ToolTip>
            </Button>
            <Button
                    Width="25"
                    Height="25"
                    Margin="25,0,0,0"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Command="{Binding DetachCommand}"
                    Style="{StaticResource SecondaryBackgroundButton}"
                    Visibility="{Binding DetachCommand, Converter={StaticResource NullToVisibilityCollapsedConverter}}">
                <Grid>
                    <Path
                            Margin="5"
                            Data="{StaticResource TrashCanSVG}"
                            Fill="{StaticResource ButtonForegroundBrush}"
                            Stretch="Uniform"
                            UseLayoutRounding="True" />
                </Grid>
                <Button.ToolTip>
                    <ToolTip>
                        <TextBlock Foreground="{StaticResource PrimaryBrush}" Text="{ns:Loc Lbl_SequenceContainer_Delete_Tooltip}" />
                    </ToolTip>
                </Button.ToolTip>
            </Button>
            <Button
                    x:Name="CloneContainerButton"
                    Width="25"
                    Height="25"
                    Margin="25,0,0,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Command="{Binding AddCloneToParentCommand}"
                    Style="{StaticResource SecondaryBackgroundButton}"
                    Visibility="{Binding AddCloneToParentCommand, Converter={StaticResource NullToVisibilityCollapsedConverter}}">
                    <Grid>
                        <Path
                            Margin="5"
                            Data="{StaticResource CopySVG}"
                            Fill="{StaticResource ButtonForegroundBrush}"
                            Stretch="Uniform"
                            UseLayoutRounding="True" />
                    </Grid>
                    <Button.ToolTip>
                        <ToolTip>
                            <TextBlock Foreground="{StaticResource PrimaryBrush}" Text="{ns:Loc Lbl_SequenceContainer_Duplicate_Tooltip}" />
                        </ToolTip>
                    </Button.ToolTip>
                </Button>
                <Button
                    x:Name="MoveUpButton"
                    Width="25"
                    Height="25"
                    Margin="25,0,0,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Command="{Binding MoveUpCommand}"
                    Style="{StaticResource SecondaryBackgroundButton}">
                    <Grid>
                        <Path
                            Margin="5"
                            Data="{StaticResource ArrowUpSVG}"
                            Fill="{StaticResource ButtonForegroundBrush}"
                            Stretch="Uniform"
                            UseLayoutRounding="True" />
                    </Grid>
                    <Button.ToolTip>
                        <ToolTip>
                            <TextBlock Foreground="{StaticResource PrimaryBrush}" Text="{ns:Loc Lbl_SequenceContainer_MoveUp_Tooltip}" />
                        </ToolTip>
                    </Button.ToolTip>
                </Button>
                <Button
                    x:Name="MoveDownButton"
                    Width="25"
                    Height="25"
                    Margin="10,0,5,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Command="{Binding MoveDownCommand}"
                    Style="{StaticResource SecondaryBackgroundButton}"
                    Visibility="{Binding MoveDownCommand, Converter={StaticResource NullToVisibilityCollapsedConverter}}">
                    <Grid>
                        <Path
                            Margin="5"
                            Data="{StaticResource ArrowDownSVG}"
                            Fill="{StaticResource ButtonForegroundBrush}"
                            Stretch="Uniform"
                            UseLayoutRounding="True" />
                    </Grid>
                    <Button.ToolTip>
                        <ToolTip>
                            <TextBlock Foreground="{StaticResource PrimaryBrush}" Text="{ns:Loc Lbl_SequenceContainer_MoveDown_Tooltip}" />
                        </ToolTip>
                    </Button.ToolTip>
                </Button>
            </StackPanel>
    </ControlTemplate>

    <Style x:Name="PowerupsStyle" TargetType="{x:Type ninactrl:DetachingExpander}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ninactrl:DetachingExpander}">
                    <Border
                        Margin="0,5,0,5"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Focusable="False"
                        UseLayoutRounding="True">
                        <DockPanel>
                            <ToggleButton
                                x:Name="HeaderSite"
                                MinWidth="0"
                                MinHeight="0"
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Header}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}"
                                ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                DockPanel.Dock="Top"
                                FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}"
                                FontFamily="{TemplateBinding FontFamily}"
                                FontSize="{TemplateBinding FontSize}"
                                FontStretch="{TemplateBinding FontStretch}"
                                FontStyle="{TemplateBinding FontStyle}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{TemplateBinding Foreground}"
                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.Style>
                                    <Style TargetType="ToggleButton">
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <StackPanel>
                                                        <Border
                                                            x:Name="topBorder"
                                                            BorderBrush="{StaticResource SecondaryBackgroundBrush}"
                                                            BorderThickness="1,1,0,0">
                                                            <Grid
                                                                 x:Name="Head"
                                                                 Background="{StaticResource SecondaryBackgroundBrush}"
                                                                 UseLayoutRounding="True">
                                                                 <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="30" />
                                                                    <ColumnDefinition Width="30" />
                                                                    <ColumnDefinition Width="*" />
                                                                 </Grid.ColumnDefinitions>
                                                                 <Path
                                                                    x:Name="iconarrow"
                                                                    Grid.Column="0"
                                                                    Width="10"
                                                                    Height="10"
                                                                    Margin="10,0,10,0"
                                                                    Data="{StaticResource ArrowRightSVG}"
                                                                    Fill="{StaticResource ButtonForegroundBrush}"
                                                                    Stretch="Uniform"
                                                                    UseLayoutRounding="True" />
                                                                <Path
                                                                    x:Name="icon"
                                                                    Grid.Column="1"
                                                                    Margin="5,0,3,0"
                                                                    Data="{StaticResource BoxClosedSVG}"
                                                                    Fill="{StaticResource ButtonForegroundBrush}"
                                                                    Stretch="Uniform"
                                                                    UseLayoutRounding="True" />
                                                                <ContentPresenter
                                                                    Grid.Column="2"
                                                                    Margin="4,0,0,0"
                                                                    HorizontalAlignment="Left"
                                                                    VerticalAlignment="Center"
                                                                    RecognizesAccessKey="True"
                                                                    UseLayoutRounding="True">
                                                                    <i:Interaction.Behaviors>
                                                                        <!--  This gives the ability to drag and drop a sequence container by its header  -->
                                                                        <behaviors:DragDropBehavior />
                                                                    </i:Interaction.Behaviors>
                                                                </ContentPresenter>
                                                            </Grid>
                                                        </Border>
                                                    </StackPanel>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsChecked" Value="true">
                                                            <Setter TargetName="icon" Property="Data" Value="{StaticResource BoxSVG}" />
                                                            <Setter TargetName="iconarrow" Property="Data" Value="{StaticResource ArrowDownSVG}" />
                                                            <Setter TargetName="iconarrow" Property="Margin" Value="5,0,10,0" />
                                                        </Trigger>
                                                        <Trigger Property="IsChecked" Value="false">
                                                            <Setter TargetName="topBorder" Property="BorderThickness" Value="1,1,1,1" />
                                                        </Trigger>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="Head" Property="Background" Value="{StaticResource ButtonBackgroundSelectedBrush}" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <Border x:Name="ContainerBorder" BorderBrush="{StaticResource SecondaryBackgroundBrush}">
                                <ContentPresenter
                                                    x:Name="ExpandSite"
                                                    Margin="{TemplateBinding Padding}"
                                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                    Focusable="false" />
                            </Border>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContainerBorder" Property="BorderThickness" Value="10,0,0,15" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContainerBorder" Property="BorderThickness" Value="0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <DataTemplate DataType="{x:Type local:DIYTrigger}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <ninactrl:DetachingExpander.Header>
                        <Border
                                MinHeight="35"
                                BorderBrush="{StaticResource BorderBrush}"
                                BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding TriggerRunner}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Triggers}" />
                                <TextBlock
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    TextAlignment="Center"
                                    FontStyle="Italic"
                                    Opacity="0.4"
                                    Text="Trigger goes here"
                                    Visibility="{Binding Triggers.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}"
                                    MinWidth="200"/>
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                </i:Interaction.Behaviors>
                            </Grid>
                            <i:Interaction.Behaviors>
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Trigger.SequenceTrigger" OnDropCommand="DropIntoDIYTriggersCommand" />
                            </i:Interaction.Behaviors>
                        </Border>
                    </ninactrl:DetachingExpander.Header>
                    <StackPanel Orientation="Vertical">
                        <TextBlock
                                HorizontalAlignment="Left"
                                Margin="0,6,0,-10"
                                VerticalAlignment="Center"
                                Opacity="0.6"
                                Text="Instructions when triggered:"/>
                        <Border
                        MinHeight="35"
                        Margin="0,0,0,0"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding TriggerRunner}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instructions will go here..."
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </StackPanel>
                </ninactrl:DetachingExpander>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:SafeTrigger}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <Border MinHeight="35"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                    <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding TriggerRunner}">
                        <ItemsControl MinHeight="35" ItemsSource="{Binding Triggers}" />
                        <TextBlock
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            TextAlignment="Center"
                            FontStyle="Italic"
                            Opacity="0.4"
                            Text="Trigger goes here"
                            Visibility="{Binding Triggers.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}"
                            MinWidth="200"/>
                        <i:Interaction.Behaviors>
                            <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                        </i:Interaction.Behaviors>
                    </Grid>
                    <i:Interaction.Behaviors>
                        <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Trigger.SequenceTrigger" OnDropCommand="SafeTriggerCommand" />
                    </i:Interaction.Behaviors>
                </Border>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.MoveFocuserRelative_Mini">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{Binding RelativePosition}" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
        </mini:MiniSequenceItem>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:MoveFocuserRelative}">
        <nina:SequenceBlockView>
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblRelativePosition}" />
                    <local:ConstantControl 
                        MinWidth="40"
                        Margin="5,-4,0,0"
                        Expr="{Binding RelativePositionExpr, Mode=TwoWay}"
                        Valu="{Binding RelativePosition , Mode=TwoWay}" 
                        />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:InterruptTrigger}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Border
                        Grid.Row="1"
                        MinHeight="65"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding TriggerRunner}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instructions will go here..."
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.TemplatedSequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander>

            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.CoolCamera_Mini">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{Binding Temperature}" />
                    <TextBlock VerticalAlignment="Center" Text="°" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
        </mini:MiniSequenceItem>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:CoolCamera}">
        <nina:SequenceBlockView>
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <StackPanel.Resources>
                        <util:BindingProxy x:Key="CameraSettings" Data="{Binding CameraSettings}" />
                        <local:CameraTemperatureConverter  x:Key="TempConverter"/>

                    </StackPanel.Resources>
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblTemperature}" />

                    <local:ExprHintControl Exp="{Binding TempExpr, Mode=TwoWay}"/>

                    <TextBlock
                        Margin="2.5,4,7.5,2 "
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="°C   |" />
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblMinDuration}" />
                    <local:ExprControl Exp="{Binding DurExpr}"/>
                    <TextBlock
                       Margin="2.5,0,7.5,2 "
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Text="min" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:SetConstant}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="Name:" />
                    <TextBox
                      MinWidth="40"
                      Margin="5,-1,10,-2"
                      Text="{Binding Identifier}"
                      VerticalAlignment="Center"
                      TextAlignment="Center" />
                    <TextBlock VerticalAlignment="Center" Text="Value:" />
                    <TextBox
                       VerticalAlignment="Center"
                       MinWidth="40"
                       Margin="5,0,10,-2"
                       Text="{Binding Definition}"
                       TextAlignment="Center" />
                    <local:SymControl Exp="{Binding Expr}"/>
                    <Button
                        Width="25"
                        Height="25"
                        Margin="10,2,0,0"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"
                        Command="{Binding SendInstruction}"
                        Style="{StaticResource SecondaryBackgroundButton}">
                        <Grid>
                            <Path
                                Margin="5"
                                Data="{StaticResource Pen_NoFill_SVG}"
                                Fill="{StaticResource ButtonForegroundBrush}"
                                Stretch="Uniform"
                                UseLayoutRounding="True" />
                        </Grid>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Foreground="{StaticResource PrimaryBrush}" Text="Add the text to the NINA log" />
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:SetVariable}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="Name:" />
                    <TextBox
                       MinWidth="40"
                       Margin="5,1,10,-2"
                       Text="{Binding Variable, ValidatesOnExceptions=True}"
                       TextAlignment="Center" />
                    <TextBlock VerticalAlignment="Center" Text="Initially:" />
                    <local:ConstantControl
                      Margin="5,-2,5,3"
                      Expr="{Binding OValueExpr, Mode=TwoWay}" 
                      Valu="{Binding OValue, Mode=TwoWay}"/>
                    <TextBlock Margin="10,0,0,0" VerticalAlignment="Center" Text="Currently:" />
                    <local:ConstantControlVariable
                      Margin="5,0,5,3"
                      Expr="{Binding CValueExpr, Mode=TwoWay}" 
                      Validate="ValidateVariable"
                      Valu="{Binding CValue, Mode=TwoWay}"/>
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <!--
    We want validation of the variable name, but Validate=ValidateVariable will cause the
    validation warning to appear with the new value of the variable, which is WRONG
    -->
    
    <DataTemplate DataType="{x:Type local:ResetVariable}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="Name:" />
                    <TextBox
                       MinWidth="40"
                       Margin="5,0,10,-2"
                       Text="{Binding Variable, ValidatesOnExceptions=True}"
                       TextAlignment="Center" />
                    <TextBlock VerticalAlignment="Center" Text="Value:" />
                    <local:ConstantControl
                       Margin="5,-4,5,3"
                       Expr="{Binding CValueExpr, Mode=TwoWay}" 
                       Valu="{Binding CValue, Mode=TwoWay}"/>
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:Retry}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="# of Retries:" />
                    <TextBox
                        MinWidth="40"
                        Margin="5,0,10,0"
                        Text="{Binding Iterations}"
                        TextAlignment="Center" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
            <nina:SequenceBlockView.SequenceItemProgressContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{ns:Loc LblIterations}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center">/</TextBlock>
                    <TextBlock VerticalAlignment="Center" Text="{Binding Iterations}" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemProgressContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:LogThis}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="Text:" />
                    <TextBox
                        VerticalAlignment="Center"
                        MinWidth="400"
                        Margin="5,2,10,0"
                        Text="{Binding LogText}"
                        TextAlignment="Left" />
                    <Button
                       Width="25"
                       Height="25"
                       Margin="10,2,0,0"
                       HorizontalAlignment="Right"
                       VerticalAlignment="Center"
                       Command="{Binding SendInstruction}"
                       Style="{StaticResource SecondaryBackgroundButton}">
                        <Grid>
                            <Path
                               Margin="5"
                               Data="{StaticResource Pen_NoFill_SVG}"
                               Fill="{StaticResource ButtonForegroundBrush}"
                               Stretch="Uniform"
                               UseLayoutRounding="True" />
                        </Grid>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Foreground="{StaticResource PrimaryBrush}" Text="Add the text to the NINA log" />
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:IfSwitch}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <ninactrl:DetachingExpander.Header>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock VerticalAlignment="Center" Margin="0,3,0,0" Text="Enter an expression using the available switch/weather values:" />
                            <TextBox
                                    MinWidth="300"
                                    Margin="5,5,10,0"
                                    Text="{Binding Predicate}"
                                    ToolTip="Foo"
                                    ToolTipOpening="IfSwitch_PredicateToolTip"
                                    VerticalAlignment="Center"
                                    TextAlignment="Left" />
                            <Grid Grid.Column="1" Visibility="Visible">
                                <Border
                                Width="20"
                                Height="20"
                                Margin="5,2,5,0"
                                Background="{StaticResource NotificationErrorBrush}"
                                BorderBrush="Transparent"
                                CornerRadius="10">
                                    <Border.Visibility>
                                        <PriorityBinding>
                                            <Binding
                                            Converter="{StaticResource ZeroToVisibilityConverter}"
                                            FallbackValue="Collapsed"
                                            Path="Switches.Count" />
                                        </PriorityBinding>
                                    </Border.Visibility>
                                    <Path
                                    HorizontalAlignment="Right"
                                    Data="{StaticResource AboutSVG}"
                                    Fill="{StaticResource ButtonForegroundBrush}"
                                    Stretch="Uniform" />
                                    <Border.ToolTip>
                                        <ItemsControl ItemsSource="{Binding Switches}" />
                                    </Border.ToolTip>
                                </Border>
                            </Grid>
                        </StackPanel>
                    </ninactrl:DetachingExpander.Header>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border
                        Grid.Row="1"
                        MinHeight="35"
                        Margin="0,10,0,10"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Conditional instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.SequenceItem.ISequenceItem;" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander>

            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:LoopWhile}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <Border
                        Width="20"
                        Height="20"
                        Margin="5,2,5,0"
                        Background="{StaticResource NotificationErrorBrush}"
                        BorderBrush="Transparent"
                        CornerRadius="10">
                        <Border.Visibility>
                            <PriorityBinding>
                                <Binding
                                    Converter="{StaticResource ZeroToVisibilityConverter}"
                                    FallbackValue="Collapsed"
                                    Path="Switches.Count" />
                            </PriorityBinding>
                        </Border.Visibility>
                        <Path
                            HorizontalAlignment="Right"
                            Data="{StaticResource AboutSVG}"
                            Fill="{StaticResource ButtonForegroundBrush}"
                            Stretch="Uniform" />
                        <Border.ToolTip>
                            <ItemsControl ItemsSource="{Binding Switches}" />
                        </Border.ToolTip>
                    </Border>
                    <local:ExprControl Label="Expression:" Exp="{Binding Path=PredicateExpr, Mode=TwoWay}"/>
                </StackPanel>

            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:RepeatUntilAllSucceed}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <ninactrl:DetachingExpander.Header>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock VerticalAlignment="Center" Margin="10,3,0,0" Text="Wait " />
                            <local:ConstantControl 
                                Margin = "8,3,10,5" 
                                Expr="{Binding Path=WaitTimeExpr, Mode=TwoWay}"
                                Valu="{Binding Path=WaitTime, Mode=TwoWay}"
                                Validate="ValidateTime" />
                            <TextBlock VerticalAlignment="Center" Margin="0,3,0,0" Text="s before repeating " />
                        </StackPanel>
                    </ninactrl:DetachingExpander.Header>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border
                        Grid.Row="1"
                        MinHeight="35"
                        Margin="0,10,0,10"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander>

            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

 
    <DataTemplate DataType="{x:Type local:IfFailed}">
                 <ninactrl:DetachingExpander>
                    <ninactrl:DetachingExpander.Header>
                        <Border
                                MinHeight="35"
                                BorderBrush="{StaticResource BorderBrush}"
                                BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Condition}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Text="Instruction to check goes here"
                                TextAlignment="Center"
                                MinWidth="400"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                </i:Interaction.Behaviors>
                            </Grid>
                            <i:Interaction.Behaviors>
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.SequenceItem.ISequenceItem" OnDropCommand="DropIntoIfCommand" />
                            </i:Interaction.Behaviors>
                        </Border>
                    </ninactrl:DetachingExpander.Header>
                    <StackPanel Orientation="Vertical">
                        <TextBlock
                                MinHeight="30"
                                HorizontalAlignment="Left"
                                Margin="0,10,0,-20"
                                VerticalAlignment="Center"
                                Text="Instructions to execute if the instruction fails:" />
                        <Border
                        MinHeight="35"
                        Margin="0,0,0,0"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Text="Instructions go here"
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </StackPanel>
                </ninactrl:DetachingExpander>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:IfSafe}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <StackPanel Orientation="Vertical">
                        <TextBlock
                               MinHeight="30"
                               HorizontalAlignment="Left"
                               Margin="0,10,0,-20"
                               VerticalAlignment="Center"
                               Text="Instructions to execute if your gear is 'safe':" />
                        <Border
                       MinHeight="35"
                       Margin="0,0,0,0"
                       BorderBrush="{StaticResource BorderBrush}"
                       BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               FontStyle="Italic"
                               Text="Instructions go here"
                               Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </StackPanel>
                </ninactrl:DetachingExpander>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:OnceSafe}">
        <Border>
            <Border.Resources>
                <wpfutil:SharedResourceDictionary Source="/NINA.Sequencer;component/Resources/Styles/ProgressStyle.xaml" />
            </Border.Resources>
            <i:Interaction.Behaviors>
                <!--  Drop area above and below the Sequence Container  -->
                <behaviors:DragOverBehavior
                    AllowDragCenter="False"
                    DragAboveSize="25"
                    DragBelowSize="15" />
            </i:Interaction.Behaviors>
            <ninactrl:DetachingExpander>
                <ninactrl:DetachingExpander.Header>
                    <Grid
                        MinHeight="35"
                        Margin="0"
                        HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Mode=OneWayToSource}"
                        Background="{StaticResource SecondaryBackgroundBrush}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock 
                                 MinHeight="25"
                                 Margin="10,10,10,0"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Text="Once Safe" />
                            </StackPanel>
                        </Grid>
                        <Border Grid.Column="1" Background="{StaticResource SecondaryBackgroundBrush}">
                            <ContentPresenter
                                Margin="2,0,10,0"
                                HorizontalAlignment="Right"
                                Content="{Binding}"
                                DockPanel.Dock="Right"
                                Style="{StaticResource ProgressPresenter}" />
                        </Border>
                        <Border
                           x:Name="ButtonCommands"
                           Grid.Column="2"
                           HorizontalAlignment="Stretch"
                           Background="{StaticResource SecondaryBackgroundBrush}">
                            <Control Template="{StaticResource PowerupsButtons}" />
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander.Header>
                <StackPanel Grid.Row="1" Orientation="Vertical">
                    <Border
                        MinHeight="35"
                        Margin="0,0,0,0"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                        <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                            <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                            <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="The specified template will go here..."
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                            <i:Interaction.Behaviors>
                                <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                            </i:Interaction.Behaviors>
                        </Grid>
                    </Border>
                </StackPanel>
            </ninactrl:DetachingExpander>
        </Border>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:TemplateByReference}">
        <Border>
            <Border.Resources>
                <wpfutil:SharedResourceDictionary Source="/NINA.Sequencer;component/Resources/Styles/ProgressStyle.xaml" />
            </Border.Resources>
            <i:Interaction.Behaviors>
                <!--  Drop area above and below the Sequence Container  -->
                <behaviors:DragOverBehavior
                    AllowDragCenter="False"
                    DragAboveSize="25"
                    DragBelowSize="15" />
            </i:Interaction.Behaviors>
            <ninactrl:DetachingExpander>
                <ninactrl:DetachingExpander.Header>
                    <Grid
                        MinHeight="35"
                        Margin="0"
                        HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Mode=OneWayToSource}"
                        Background="{StaticResource SecondaryBackgroundBrush}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock 
                                     Foreground="{StaticResource ButtonForegroundBrush}"
                                  MinHeight="30"
                                   Margin="10,10,10,0"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center"
                                   Text="Template By Reference" />
                                <TextBlock
                                    Foreground="{StaticResource ButtonForegroundBrush}"
                                    MinHeight="30"
                                    Margin="10,10,10,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Opacity="0.9"
                                    Text="Template Name:" />
                                <ComboBox
                                    Foreground="{StaticResource ButtonForegroundBrush}"
                                    Height="24"
                                    Margin="10,-4,0,0"
                                    DisplayMemberPath="Container.Name"
                                    ItemsSource="{Binding SortedTemplates}"
                                    SelectedItem="{Binding SelectedTemplate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    SelectedValuePath="Container.Name" />
                            </StackPanel>
                        </Grid>
                        <Border Grid.Column="1" Background="{StaticResource SecondaryBackgroundBrush}">
                            <ContentPresenter
                                Margin="2,0,10,0"
                                HorizontalAlignment="Right"
                                Content="{Binding}"
                                DockPanel.Dock="Right"
                                Style="{StaticResource ProgressPresenter}" />
                        </Border>
                        <Border
                           x:Name="ButtonCommands"
                           Grid.Column="2"
                           HorizontalAlignment="Stretch"
                           Background="{StaticResource SecondaryBackgroundBrush}">
                            <Control Template="{StaticResource PowerupsButtons}" />
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander.Header>
                <StackPanel Grid.Row="1" Orientation="Vertical">
                    <Border
                        MinHeight="35"
                        Margin="0,0,0,0"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                        <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                            <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                            <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="The specified template will go here..."
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                            <i:Interaction.Behaviors>
                                <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoTemplateCommand" />
                            </i:Interaction.Behaviors>
                        </Grid>
                    </Border>
                </StackPanel>
            </ninactrl:DetachingExpander>
        </Border>
    </DataTemplate>


    <DataTemplate DataType="{x:Type local:IfConstant}">
        <Border>
            <Border.Resources>
                <wpfutil:SharedResourceDictionary Source="/NINA.Sequencer;component/Resources/Styles/ProgressStyle.xaml" />
            </Border.Resources>
            <i:Interaction.Behaviors>
                <!--  Drop area above and below the Sequence Container  -->
                <behaviors:DragOverBehavior
                  AllowDragCenter="False"
                  DragAboveSize="25"
                  DragBelowSize="15" />
            </i:Interaction.Behaviors>
            <ninactrl:DetachingExpander>
                <ninactrl:DetachingExpander.Header>
                    <Grid
                      MinHeight="35"
                      Margin="0"
                      HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Mode=OneWayToSource}"
                      Background="{StaticResource SecondaryBackgroundBrush}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock 
                                 MinHeight="25"
                                 Margin="10,10,10,0"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Text="If" />
                            <Border
                               Width="20"
                               Height="20"
                               Margin="5,0,5,0"
                               Background="{StaticResource NotificationErrorBrush}"
                               BorderBrush="Transparent"
                               CornerRadius="10">
                                <Border.Visibility>
                                    <PriorityBinding>
                                        <Binding
                                           Converter="{StaticResource ZeroToVisibilityConverter}"
                                           FallbackValue="Collapsed"
                                           Path="Issues.Count" />
                                    </PriorityBinding>
                                </Border.Visibility>
                                <Path
                                   HorizontalAlignment="Right"
                                   Data="{StaticResource ExclamationCircledSVG}"
                                   Fill="{StaticResource ButtonForegroundBrush}"
                                   Stretch="Uniform" />
                                <Border.ToolTip>
                                    <ItemsControl ItemsSource="{Binding Issues}" />
                                </Border.ToolTip>
                            </Border>

                            <Border
                              Width="20"
                              Height="20"
                              Margin="5,0,5,0"
                              Background="{StaticResource NotificationErrorBrush}"
                              BorderBrush="Transparent"
                              CornerRadius="10">
                                <Border.Visibility>
                                    <PriorityBinding>
                                        <Binding
                                          Converter="{StaticResource ZeroToVisibilityConverter}"
                                          FallbackValue="Collapsed"
                                          Path="Switches.Count" />
                                    </PriorityBinding>
                                </Border.Visibility>
                                <Path
                                  HorizontalAlignment="Right"
                                  Data="{StaticResource AboutSVG}"
                                  Fill="{StaticResource ButtonForegroundBrush}"
                                  Stretch="Uniform" />
                                <Border.ToolTip>
                                    <ItemsControl ItemsSource="{Binding Switches}" />
                                </Border.ToolTip>
                            </Border>
                            <local:ExprControl Label="Ecpression:" Exp="{Binding IfExpr, Mode=TwoWay}"/>
                        </StackPanel>
                        <Border Grid.Column="1" Background="{StaticResource SecondaryBackgroundBrush}">
                            <ContentPresenter
                              Margin="2,0,10,0"
                              HorizontalAlignment="Right"
                              Content="{Binding}"
                              DockPanel.Dock="Right"
                              Style="{StaticResource ProgressPresenter}" />
                        </Border>
                        <Border
                           x:Name="ButtonCommands"
                           Grid.Column="2"
                           HorizontalAlignment="Stretch"
                           Background="{StaticResource SecondaryBackgroundBrush}">
                            <Control Template="{StaticResource PowerupsButtons}" />
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander.Header>
                <StackPanel Grid.Row="1" Orientation="Vertical">
                    <Border
                      MinHeight="35"
                      Margin="0,0,0,0"
                      BorderBrush="{StaticResource BorderBrush}"
                      BorderThickness="1">
                        <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                            <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                            <TextBlock
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              FontStyle="Italic"
                              Opacity="0.4"
                              Text="Conditional instructions go here"
                              Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                            <i:Interaction.Behaviors>
                                <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                            </i:Interaction.Behaviors>
                        </Grid>
                    </Border>
                </StackPanel>
            </ninactrl:DetachingExpander>
        </Border>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type local:CVContainer}">
        <Border>
            <Border.Resources>
                <wpfutil:SharedResourceDictionary Source="/NINA.Sequencer;component/Resources/Styles/ProgressStyle.xaml" />
            </Border.Resources>
            <i:Interaction.Behaviors>
                <!--  Drop area above and below the Sequence Container  -->
                <behaviors:DragOverBehavior
                  AllowDragCenter="False"
                  DragAboveSize="25"
                  DragBelowSize="15" />
            </i:Interaction.Behaviors>
            <ninactrl:DetachingExpander>
                <ninactrl:DetachingExpander.Header>
                    <Grid
                      MinHeight="35"
                      Margin="0"
                      HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Mode=OneWayToSource}"
                      Background="{StaticResource SecondaryBackgroundBrush}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock 
                                 MinHeight="25"
                                 Margin="10,10,10,0"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Center"
                                 Text="Constants/Variables Container" />
                            <Border
                               Width="20"
                               Height="20"
                               Margin="5,0,5,0"
                               Background="{StaticResource NotificationErrorBrush}"
                               BorderBrush="Transparent"
                               CornerRadius="10">
                                <Border.Visibility>
                                    <PriorityBinding>
                                        <Binding
                                           Converter="{StaticResource ZeroToVisibilityConverter}"
                                           FallbackValue="Collapsed"
                                           Path="Issues.Count" />
                                    </PriorityBinding>
                                </Border.Visibility>
                                <Path
                                   HorizontalAlignment="Right"
                                   Data="{StaticResource ExclamationCircledSVG}"
                                   Fill="{StaticResource ButtonForegroundBrush}"
                                   Stretch="Uniform" />
                                <Border.ToolTip>
                                    <ItemsControl ItemsSource="{Binding Issues}" />
                                </Border.ToolTip>
                            </Border>
                        </StackPanel>
                        <Border Grid.Column="1" Background="{StaticResource SecondaryBackgroundBrush}">
                            <ContentPresenter
                              Margin="2,0,10,0"
                              HorizontalAlignment="Right"
                              Content="{Binding}"
                              DockPanel.Dock="Right"
                              Style="{StaticResource ProgressPresenter}" />
                        </Border>
                        <Border
                           x:Name="ButtonCommands"
                           Grid.Column="2"
                           HorizontalAlignment="Stretch"
                           Background="{StaticResource SecondaryBackgroundBrush}">
                            <Control Template="{StaticResource PowerupsButtons}" />
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander.Header>
                <StackPanel Grid.Row="1" Orientation="Vertical">
                    <Border
                      MinHeight="35"
                      Margin="0,0,0,0"
                      BorderBrush="{StaticResource BorderBrush}"
                      BorderThickness="1">
                        <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                            <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                            <TextBlock
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              FontStyle="Italic"
                              Opacity="0.4"
                              Text="Conditional instructions go here"
                              Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                            <i:Interaction.Behaviors>
                                <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                            </i:Interaction.Behaviors>
                        </Grid>
                    </Border>
                </StackPanel>
            </ninactrl:DetachingExpander>
        </Border>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:IfThenElse}">
        <Border>
            <Border.Resources>
                <wpfutil:SharedResourceDictionary Source="/NINA.Sequencer;component/Resources/Styles/ProgressStyle.xaml" />
            </Border.Resources>
            <i:Interaction.Behaviors>
                <!--  Drop area above and below the Sequence Container  -->
                <behaviors:DragOverBehavior
                   AllowDragCenter="False"
                   DragAboveSize="25"
                   DragBelowSize="15" />
            </i:Interaction.Behaviors>
            <ninactrl:DetachingExpander>
                <ninactrl:DetachingExpander.Header>
                    <Grid
                       MinHeight="35"
                       Margin="0"
                       HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Mode=OneWayToSource}"
                       Background="{StaticResource SecondaryBackgroundBrush}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock 
                                  MinHeight="25"
                                  Margin="10,10,10,0"
                                  HorizontalAlignment="Left"
                                  VerticalAlignment="Center"
                                  Text="If/Then/Else" />
                            <Border
                                Width="20"
                                Height="20"
                                Margin="5,0,5,0"
                                Background="{StaticResource NotificationErrorBrush}"
                                BorderBrush="Transparent"
                                CornerRadius="10">
                                <Border.Visibility>
                                    <PriorityBinding>
                                        <Binding
                                            Converter="{StaticResource ZeroToVisibilityConverter}"
                                            FallbackValue="Collapsed"
                                            Path="Issues.Count" />
                                    </PriorityBinding>
                                </Border.Visibility>
                                <Path
                                    HorizontalAlignment="Right"
                                    Data="{StaticResource ExclamationCircledSVG}"
                                    Fill="{StaticResource ButtonForegroundBrush}"
                                    Stretch="Uniform" />
                                <Border.ToolTip>
                                    <ItemsControl ItemsSource="{Binding Issues}" />
                                </Border.ToolTip>
                            </Border>
                            <Border
                               Width="20"
                               Height="20"
                               Margin="5,0,5,0"
                               Background="{StaticResource NotificationErrorBrush}"
                               BorderBrush="Transparent"
                               CornerRadius="10">
                                <Border.Visibility>
                                    <PriorityBinding>
                                        <Binding
                                           Converter="{StaticResource ZeroToVisibilityConverter}"
                                           FallbackValue="Collapsed"
                                           Path="Switches.Count" />
                                    </PriorityBinding>
                                </Border.Visibility>
                                <Path
                                   HorizontalAlignment="Right"
                                   Data="{StaticResource AboutSVG}"
                                   Fill="{StaticResource ButtonForegroundBrush}"
                                   Stretch="Uniform" />
                                <Border.ToolTip>
                                    <ItemsControl ItemsSource="{Binding Switches}" />
                                </Border.ToolTip>
                            </Border>
                            <TextBlock VerticalAlignment="Center" Margin="8,0,5,0" Text="Expression: ">
                            </TextBlock>
                            <local:ConstantControl 
                                  Margin="0,5,10,10" 
                                  ToolTip="Foo"
                                  ToolTipOpening="IfConstant_PredicateToolTip"
                                  Validate="ValidateConstant"
                                  Expr="{Binding Path=Predicate, Mode=TwoWay}"
                                  Valu="{Binding Path=PredicateValue, Mode=TwoWay}" 
                                  />
                        </StackPanel>
                        <Border Grid.Column="1" Background="{StaticResource SecondaryBackgroundBrush}">
                            <ContentPresenter
                               Margin="2,0,10,0"
                               HorizontalAlignment="Right"
                               Content="{Binding}"
                               DockPanel.Dock="Right"
                               Style="{StaticResource ProgressPresenter}" />
                        </Border>
                        <Border
                            x:Name="ButtonCommands"
                            Grid.Column="2"
                            HorizontalAlignment="Stretch"
                            Background="{StaticResource SecondaryBackgroundBrush}">
                            <Control Template="{StaticResource PowerupsButtons}" />
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander.Header>
                <StackPanel Grid.Row="1" Orientation="Vertical">
                    <Border
                       MinHeight="35"
                       Margin="0,0,0,0"
                       BorderBrush="{StaticResource BorderBrush}"
                       BorderThickness="1">
                        <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                            <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                            <TextBlock
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               FontStyle="Italic"
                               Opacity="0.4"
                               Text="Then instructions go here"
                               Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                            <i:Interaction.Behaviors>
                                <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                            </i:Interaction.Behaviors>
                        </Grid>
                    </Border>
                    <TextBlock Text="Else" Margin="10,10,0,0" MinHeight="35" VerticalAlignment="Bottom" />
                    <Border
                       MinHeight="35"
                       Margin="0,-10,0,0"
                       BorderBrush="{StaticResource BorderBrush}"
                       BorderThickness="1">
                        <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding ElseInstructions}">
                            <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                            <TextBlock
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               FontStyle="Italic"
                               Opacity="0.4"
                               Text="Else instructions go here"
                               Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                            <i:Interaction.Behaviors>
                                <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                            </i:Interaction.Behaviors>
                        </Grid>
                    </Border>
                </StackPanel>
            </ninactrl:DetachingExpander>
        </Border>
    </DataTemplate>

    <WrapPanel
       x:Key="TakeFlatExposureDetails"
       x:Shared="false"
       Orientation="Horizontal">
        <TextBlock
           Margin="5,0,0,0"
           VerticalAlignment="Center"
           Text="#" />

        <local:ConstantControl 
                       Margin="0,0,10,5" 
                       Expr="{Binding Path=Parent.IterationsExpr, Mode=TwoWay}"
                       Valu="{Binding Path=Parent.IterationCount, Mode=TwoWay}"
                       Type="Integer"
                       />
        <TextBlock
           Margin="7.5,0,7.5,0"
           HorizontalAlignment="Center"
           VerticalAlignment="Center"
           Text="|" />

        <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblFilter}" />

        <ComboBox
            Margin="5,0,0,0"
            HorizontalAlignment="Center"
            IsEditable="True"
            DisplayMemberPath="Name"
            Text="{Binding Parent.FilterExpr, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
            >
            <ComboBox.Resources>
                <CollectionViewSource x:Key="Filters" Source="{Binding Source={StaticResource ProfileService}, Path=ActiveProfile.FilterWheelSettings.FilterWheelFilters}" />
            </ComboBox.Resources>
            <ComboBox.ItemsSource>
                <CompositeCollection>
                    <x:Static Member="filter:NullFilter.Instance" />
                    <CollectionContainer Collection="{Binding Source={StaticResource Filters}}" />
                </CompositeCollection>
            </ComboBox.ItemsSource>
        </ComboBox>
        <local:ConstantComboControl
            Visibility="{Binding Parent.CVFilter, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
            Margin="0,-3,10,5"
            Expr="{Binding Path=Parent.FilterExpr, Mode=TwoWay}"
            Valu="{Binding Path=Parent.Filter, Mode=TwoWay}"
            Type="Integer"
            Combo="{Binding Path=Parent.FilterNames, Mode=TwoWay}"/>

        <TextBlock
           Margin="7.5,0,7.5,0"
           HorizontalAlignment="Center"
           VerticalAlignment="Center"
           Text="|" />

        <StackPanel DataContext="{Binding Items[0]}" Orientation="Horizontal">
            <StackPanel.Resources>
                <util:BindingProxy x:Key="CameraInfo" Data="{Binding CameraInfo}" />
            </StackPanel.Resources>

            <TextBlock
               Margin="7.5,0,7.5,0"
               HorizontalAlignment="Center"
               VerticalAlignment="Center"
               Text="|" />

            <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblBinning}" />
            <ComboBox
               Margin="5,0,0,0"
               DisplayMemberPath="Name"
               ItemsSource="{Binding Source={StaticResource CameraInfo}, Path=Data.BinningModes, Converter={StaticResource DefaultBinningModesConverter}}"
               SelectedItem="{Binding Binning, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
               SelectedValuePath="Name" />

            <!--  List of Gain  -->
            <WrapPanel Orientation="Horizontal">
                <WrapPanel.Visibility>
                    <PriorityBinding>
                        <Binding
                           Converter="{StaticResource CollectionContainsItemsToVisibilityConverter}"
                           Path="Data.Gains"
                           Source="{StaticResource CameraInfo}" />
                        <Binding
                           Converter="{StaticResource BooleanToVisibilityCollapsedConverter}"
                           Path="Data.Connected"
                           Source="{StaticResource CameraInfo}" />
                    </PriorityBinding>
                </WrapPanel.Visibility>
                <TextBlock
                   Margin="7.5,0,7.5,0"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   Text="|" />
                <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblGain}" />
                <ComboBox
                   Margin="5,0,0,0"
                   DisplayMemberPath="Text"
                   IsSynchronizedWithCurrentItem="True"
                   SelectedValuePath="Text">
                    <ComboBox.ItemsSource>
                        <CompositeCollection>
                            <TextBlock Text="{Binding Source={StaticResource CameraInfo}, Path=Data.DefaultGain, UpdateSourceTrigger=PropertyChanged, StringFormat=({0})}" />
                            <CollectionContainer Collection="{Binding Source={StaticResource CameraInfo}, Path=Data.Gains, Converter={StaticResource IntListToTextBlockListConverter}}" />
                        </CompositeCollection>
                    </ComboBox.ItemsSource>
                    <ComboBox.SelectedValue>
                        <MultiBinding
                           Converter="{StaticResource MinusOneToBaseValueConverter}"
                           Mode="TwoWay"
                           UpdateSourceTrigger="PropertyChanged">
                            <Binding
                               Mode="TwoWay"
                               Path="Gain"
                               UpdateSourceTrigger="PropertyChanged" />
                            <Binding
                               Mode="OneWay"
                               Path="Data.DefaultGain"
                               Source="{StaticResource CameraInfo}"
                               UpdateSourceTrigger="PropertyChanged" />
                        </MultiBinding>
                    </ComboBox.SelectedValue>
                </ComboBox>
            </WrapPanel>

            <!--  Free Gain  -->
            <WrapPanel Orientation="Horizontal">
                <WrapPanel.Visibility>
                    <PriorityBinding FallbackValue="Visible">
                        <Binding
                           Converter="{StaticResource InverseCollectionContainsItemsToVisibilityConverter}"
                           Path="Data.Gains"
                           Source="{StaticResource CameraInfo}" />
                    </PriorityBinding>
                </WrapPanel.Visibility>
                <TextBlock
                   Margin="7.5,0,7.5,0"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   Text="|" />
                <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblGain}" />
                <local:ConstantHintControl 
                    Margin="8,1,10,5" 
                    Expr="{Binding Path=GainExpr, Mode=TwoWay}"
                    Valu="{Binding Path=Gain, Mode=TwoWay}"
                    Default="{Binding Mode=OneWay, Path=Data.DefaultGain, Source={StaticResource CameraInfo}, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource CameraDefaultValueConverter}}" 
                    Validate="ValidateGain"
                />
            </WrapPanel>

            <!--  Offset  -->
            <WrapPanel Orientation="Horizontal">
                <WrapPanel.Visibility>
                    <MultiBinding Converter="{StaticResource BooleanOrToVisibilityCollapsedMultiConverter}" FallbackValue="Visible">
                        <Binding
                           Converter="{StaticResource InverseBooleanConverter}"
                           Path="Data.Connected"
                           Source="{StaticResource CameraInfo}" />
                        <Binding Path="Data.CanSetOffset" Source="{StaticResource CameraInfo}" />
                    </MultiBinding>
                </WrapPanel.Visibility>
                <TextBlock
                   Margin="7.5,0,7.5,0"
                   HorizontalAlignment="Center"
                   VerticalAlignment="Center"
                   Text="|" />
                <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblOffset}" />
                <local:ConstantHintControl 
                    Margin="8,1,10,5" 
                    Expr="{Binding Path=OffsetExpr, Mode=TwoWay}"
                    Valu="{Binding Path=Offset, Mode=TwoWay}"
                    Default="{Binding Mode=OneWay, Path=Data.DefaultOffset, Source={StaticResource CameraInfo}, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource CameraDefaultValueConverter}}" 
                    Validate="ValidateOffset"
                />
            </WrapPanel>
        </StackPanel>
    </WrapPanel>

    <ControlTemplate x:Key="TrainedFlatExposureTemplate">
        <nina:SequenceBlockView>
            <nina:SequenceBlockView.SequenceItemContent>
                <WrapPanel Orientation="Horizontal">

                    <ContentPresenter Content="{StaticResource TakeFlatExposureDetails}" DataContext="{Binding Items[4]}" />

                    <TextBlock
                       Margin="7.5,0,7.5,0"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       Text="|" />

                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc Lbl_SequenceItem_FlatDevice_TrainedFlatExposure_KeepClosed}" />
                    <CheckBox
                       Margin="5,0,0,0"
                       VerticalAlignment="Center"
                       IsChecked="{Binding KeepPanelClosed}" />
                </WrapPanel>
            </nina:SequenceBlockView.SequenceItemContent>
            <nina:SequenceBlockView.SequenceItemProgressContent>
                <WrapPanel DataContext="{Binding Items[4]}" Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblProgress}" />
                    <TextBlock
                       Margin="5,0,0,0"
                       VerticalAlignment="Center"
                       Text="{Binding Conditions[0].CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center" Text="/" />
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                </WrapPanel>
            </nina:SequenceBlockView.SequenceItemProgressContent>
        </nina:SequenceBlockView>
    </ControlTemplate>

    <DataTemplate DataType="{x:Type local:TrainedFlatExposure}">
        <nina:SequenceBlockView Template="{StaticResource TrainedFlatExposureTemplate}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:TrainedDarkFlatExposure}">
        <nina:SequenceBlockView Template="{StaticResource TrainedFlatExposureTemplate}" />
    </DataTemplate>

    <!--<DataTemplate x:Key="NINA.Sequencer.SequenceItem.FilterWheel.SwitchFilter_Mini">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal" Visibility="{Binding Filter, Converter={StaticResource NullToVisibilityCollapsedConverter}}">
                    <TextBlock VerticalAlignment="Center" Text="{Binding Filter.Name}" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
        </mini:MiniSequenceItem>
    </DataTemplate>-->
    
    <DataTemplate DataType="{x:Type local:SwitchFilter}">
        <nina:SequenceBlockView>
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblFilter}" />
                    <ComboBox
                       Margin="5,0,0,0"
                       IsEditable="True"
                       DisplayMemberPath="Name"
                       Text="{Binding FilterExpr, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                       >
                        <ComboBox.Resources>
                            <CollectionViewSource x:Key="Filters" Source="{Binding Source={StaticResource ProfileService}, Path=ActiveProfile.FilterWheelSettings.FilterWheelFilters}" />
                        </ComboBox.Resources>
                        <ComboBox.ItemsSource>
                            <CompositeCollection>
                                <x:Static Member="filter:NullFilter.Instance" />
                                <CollectionContainer Collection="{Binding Source={StaticResource Filters}}" />
                            </CompositeCollection>
                        </ComboBox.ItemsSource>
                    </ComboBox>
                    <local:ConstantComboControl
                       Visibility="{Binding CVFilter, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                       Margin="0,-3,10,5"
                       Expr="{Binding Path=FilterExpr, Mode=TwoWay}"
                       Valu="{Binding Path=Filter, Mode=TwoWay}"
                       Type="Integer"
                       Combo="{Binding Path=FilterNames, Mode=TwoWay}"/>
                </StackPanel>

 

            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>


    <DataTemplate DataType="{x:Type local:WhenSwitch}">
        <Border>
            <Border.Resources>
                <wpfutil:SharedResourceDictionary Source="/NINA.Sequencer;component/Resources/Styles/ProgressStyle.xaml" />
            </Border.Resources>
            <i:Interaction.Behaviors>
                <!--  Drop area above and below the Sequence Container  -->
                <behaviors:DragOverBehavior
                   AllowDragCenter="False"
                   DragAboveSize="25"
                   DragBelowSize="15" />
            </i:Interaction.Behaviors>
            <ninactrl:DetachingExpander>
                <ninactrl:DetachingExpander.Header>
                    <Grid
                       MinHeight="35"
                       Margin="0"
                       HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Mode=OneWayToSource}"
                       Background="{StaticResource SecondaryBackgroundBrush}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock 
                                  MinHeight="25"
                                  Margin="10,10,10,0"
                                  HorizontalAlignment="Left"
                                  VerticalAlignment="Center"
                                  Text="When" />
                            <Border
                                Width="20"
                                Height="20"
                                Margin="5,0,5,0"
                                Background="{StaticResource NotificationErrorBrush}"
                                BorderBrush="Transparent"
                                CornerRadius="10">
                                <Border.Visibility>
                                    <PriorityBinding>
                                        <Binding
                                            Converter="{StaticResource ZeroToVisibilityConverter}"
                                            FallbackValue="Collapsed"
                                            Path="Issues.Count" />
                                    </PriorityBinding>
                                </Border.Visibility>
                                <Path
                                    HorizontalAlignment="Right"
                                    Data="{StaticResource ExclamationCircledSVG}"
                                    Fill="{StaticResource ButtonForegroundBrush}"
                                    Stretch="Uniform" />
                                <Border.ToolTip>
                                    <ItemsControl ItemsSource="{Binding Issues}" />
                                </Border.ToolTip>
                            </Border>
                            <Border
                               Width="20"
                               Height="20"
                               Margin="5,0,5,0"
                               Background="{StaticResource NotificationErrorBrush}"
                               BorderBrush="Transparent"
                               CornerRadius="10">
                                <Border.Visibility>
                                    <PriorityBinding>
                                        <Binding
                                           Converter="{StaticResource ZeroToVisibilityConverter}"
                                           FallbackValue="Collapsed"
                                           Path="Switches.Count" />
                                    </PriorityBinding>
                                </Border.Visibility>
                                <Path
                                   HorizontalAlignment="Right"
                                   Data="{StaticResource AboutSVG}"
                                   Fill="{StaticResource ButtonForegroundBrush}"
                                   Stretch="Uniform" />
                                <Border.ToolTip>
                                    <ItemsControl ItemsSource="{Binding Switches}" />
                                </Border.ToolTip>
                            </Border>
                            <TextBlock VerticalAlignment="Center" Margin="8,0,5,0" Text="Expression: ">
                            </TextBlock>
                            <local:ConstantControl 
                                  Margin="0,2,10,10" 
                                  ToolTip="Foo"
                                  ToolTipOpening="IfConstant_PredicateToolTip"
                                  Validate="ValidateConstant"
                                  Expr="{Binding Path=Predicate, Mode=TwoWay}"
                                  Valu="{Binding Path=PredicateValue, Mode=TwoWay}" 
                                  />
                            <TextBlock VerticalAlignment="Center" Margin="25,0,0,0" Text="Once Only" />
                            <CheckBox
                                  MinWidth="40"
                                  Margin="5,0,0,0"
                                  VerticalAlignment="Center"
                                  IsChecked="{Binding OnceOnly, Mode=TwoWay}"
                                  ToolTip="If set, this instruction will only run one time and then be disabled.  This can prevent looping behavior that may not be desirable." />
                        </StackPanel>
                        <Border Grid.Column="1" Background="{StaticResource SecondaryBackgroundBrush}">
                            <ContentPresenter
                               Margin="2,0,10,0"
                               HorizontalAlignment="Right"
                               Content="{Binding}"
                               DockPanel.Dock="Right"
                               Style="{StaticResource ProgressPresenter}" />
                        </Border>
                        <Border
                            x:Name="ButtonCommands"
                            Grid.Column="2"
                            HorizontalAlignment="Stretch"
                            Background="{StaticResource SecondaryBackgroundBrush}">
                            <Control Template="{StaticResource PowerupsButtons}" />
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander.Header>
                <StackPanel Grid.Row="1" Orientation="Vertical">
                    <Border
                       MinHeight="35"
                       Margin="0,0,0,0"
                       BorderBrush="{StaticResource BorderBrush}"
                       BorderThickness="1">
                        <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                            <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                            <TextBlock
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               FontStyle="Italic"
                               Opacity="0.4"
                               Text="Conditional instructions go here"
                               Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                            <i:Interaction.Behaviors>
                                <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                            </i:Interaction.Behaviors>
                        </Grid>
                    </Border>
                </StackPanel>
            </ninactrl:DetachingExpander>
        </Border>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:WhenUnsafe}">
        <Border>
            <Border.Resources>
                <wpfutil:SharedResourceDictionary Source="/NINA.Sequencer;component/Resources/Styles/ProgressStyle.xaml" />
            </Border.Resources>
            <i:Interaction.Behaviors>
                <!--  Drop area above and below the Sequence Container  -->
                <behaviors:DragOverBehavior
                   AllowDragCenter="False"
                   DragAboveSize="25"
                   DragBelowSize="15" />
            </i:Interaction.Behaviors>
            <ninactrl:DetachingExpander>
                <ninactrl:DetachingExpander.Header>
                    <Grid
                       MinHeight="35"
                       Margin="0"
                       HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Mode=OneWayToSource}"
                       Background="{StaticResource SecondaryBackgroundBrush}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock 
                                    MinHeight="25"
                                    Margin="10,10,10,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Text="When Becomes Unsafe" />
                                <Border
                                    Width="20"
                                    Height="20"
                                    Margin="5,0,5,0"
                                    Background="{StaticResource NotificationErrorBrush}"
                                    BorderBrush="Transparent"
                                    CornerRadius="10">
                                    <Border.Visibility>
                                        <PriorityBinding>
                                            <Binding
                                            Converter="{StaticResource ZeroToVisibilityConverter}"
                                            FallbackValue="Collapsed"
                                            Path="Issues.Count" />
                                        </PriorityBinding>
                                    </Border.Visibility>
                                    <Path
                                    HorizontalAlignment="Right"
                                    Data="{StaticResource ExclamationCircledSVG}"
                                    Fill="{StaticResource ButtonForegroundBrush}"
                                    Stretch="Uniform" />
                                    <Border.ToolTip>
                                        <ItemsControl ItemsSource="{Binding Issues}" />
                                    </Border.ToolTip>
                                </Border>
                            </StackPanel>
                        </Grid>
                        <Border Grid.Column="1" Background="{StaticResource SecondaryBackgroundBrush}">
                            <ContentPresenter
                               Margin="2,0,10,0"
                               HorizontalAlignment="Right"
                               Content="{Binding}"
                               DockPanel.Dock="Right"
                               Style="{StaticResource ProgressPresenter}" />
                        </Border>
                        <Border
                            x:Name="ButtonCommands"
                            Grid.Column="2"
                            HorizontalAlignment="Stretch"
                            Background="{StaticResource SecondaryBackgroundBrush}">
                            <Control Template="{StaticResource PowerupsButtons}" />
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander.Header>
                <StackPanel Grid.Row="1" Orientation="Vertical">
                    <Border
                       MinHeight="35"
                       Margin="0,0,0,0"
                       BorderBrush="{StaticResource BorderBrush}"
                       BorderThickness="1">
                        <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                            <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                            <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instructions will go here..."
                               Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                            <i:Interaction.Behaviors>
                                <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                            </i:Interaction.Behaviors>
                        </Grid>
                    </Border>
                </StackPanel>
            </ninactrl:DetachingExpander>
        </Border>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:WaitIndefinitely}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock
                        MinHeight="20"
                        HorizontalAlignment="Left"
                        Margin="0,0,0,-20"
                        Visibility="{Binding InFlight, Converter={StaticResource BooleanToVisibilityHiddenConverter}}"
                        VerticalAlignment="Top"
                        Opacity="0.4"
                        MinWidth="200"
                        Text="Click this button to terminate the wait:" />
                    <Button
                        MinHeight="20"
                        Margin="5,-2,0,0"
                        Width="100"
                        VerticalAlignment="Top"
                        HorizontalAlignment="Stretch"
                        Visibility="{Binding InFlight, Converter={StaticResource BooleanToVisibilityHiddenConverter}}"
                        Command="{Binding StopInstructions}">
                        <TextBlock
                            Foreground="{StaticResource ButtonForegroundBrush}"
                            Text="Stop"
                            TextWrapping="Wrap" />
                    </Button>
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type local:EndInstructionSet}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock
                       MinHeight="20"
                       HorizontalAlignment="Left"
                       Margin="0,0,0,0"
                       VerticalAlignment="Center"
                       Text="Name:" />
                    <ComboBox
                       Margin="10,-2,0,0"
                       ItemsSource="{Binding InstructionSetNames}"
                       SelectedItem="{Binding InstructionSetName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:Break}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock
                        MinHeight="20"
                        HorizontalAlignment="Left"
                        Margin="0,0,0,-20"
                        Visibility="{Binding InFlight, Converter={StaticResource BooleanToVisibilityHiddenConverter}}"
                        VerticalAlignment="Top"
                        Opacity="0.9"
                        MinWidth="250"
                        ToolTip="[See variables and constants here]"
                        Text="Click this button to continue the sequence:" />
                    <Button
                        MinHeight="20"
                        Margin="5,-2,0,0"
                        Width="150"
                        VerticalAlignment="Top"
                        HorizontalAlignment="Stretch"
                        Visibility="{Binding InFlight, Converter={StaticResource BooleanToVisibilityHiddenConverter}}"
                        Command="{Binding StopInstructions}">
                        <TextBlock
                            Foreground="{StaticResource ButtonForegroundBrush}"
                            Margin="0,-2,0,0"
                            Text="Continue"
                            TextWrapping="Wrap" />
                    </Button>
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>



    <DataTemplate DataType="{x:Type local:IfUnsafe}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <ninactrl:DetachingExpander>
                    <StackPanel Orientation="Vertical">
                        <TextBlock
                                MinHeight="30"
                                HorizontalAlignment="Left"
                                Margin="0,10,0,-20"
                                VerticalAlignment="Center"
                                Opacity="0.4"
                                Text="Instructions to execute if your gear is 'unssafe':" />
                        <Border
                        MinHeight="35"
                        Margin="0,0,0,0"
                        BorderBrush="{StaticResource BorderBrush}"
                        BorderThickness="1">
                            <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                                <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                                <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instructions will go here..."
                                Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                                <i:Interaction.Behaviors>
                                    <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                    <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                                </i:Interaction.Behaviors>
                            </Grid>
                        </Border>
                    </StackPanel>
                </ninactrl:DetachingExpander>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate x:Key="NINA.Plugins.Generics.Instructions.GenericTrigger_Mini">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <TextBlock />
            </mini:MiniSequenceItem.SequenceItemContent>
        </mini:MiniSequenceItem>
    </DataTemplate>

    <WrapPanel
        x:Key="TakeExposureDetails"
        x:Shared="false"
        Orientation="Horizontal">
        <WrapPanel.Resources>
            <util:BindingProxy x:Key="CameraInfo" Data="{Binding CameraInfo}" />
        </WrapPanel.Resources>

        <TextBlock VerticalAlignment="Center" Margin="0,1,0,0" Text="{ns:Loc LblTime}" />
        <local:ConstantControl 
            Margin = "8,-1,10,5" 
            Expr="{Binding Path=ExposureTimeExpr, Mode=TwoWay}"
            Valu="{Binding Path=ExposureTime, Mode=TwoWay}" 

            />

        <TextBlock
            Margin="7.5,0,7.5,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Text="|" />

        <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblType}" />
        <ComboBox
            Margin="5,0,0,0"
            ItemsSource="{Binding ImageTypes}"
            SelectedItem="{Binding ImageType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

        <TextBlock
            Margin="7.5,0,7.5,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Text="|" />

        <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblBinning}" />
        <ComboBox
            Margin="5,0,0,0"
            DisplayMemberPath="Name"
            ItemsSource="{Binding Source={StaticResource CameraInfo}, Path=Data.BinningModes, Converter={StaticResource DefaultBinningModesConverter}}"
            SelectedItem="{Binding Binning, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
            SelectedValuePath="Name" />

        <!--  List of Gain  -->
        <WrapPanel Orientation="Horizontal">
            <WrapPanel.Visibility>
                <PriorityBinding>
                    <Binding
                        Converter="{StaticResource CollectionContainsItemsToVisibilityConverter}"
                        Path="Data.Gains"
                        Source="{StaticResource CameraInfo}" />
                    <Binding
                        Converter="{StaticResource BooleanToVisibilityCollapsedConverter}"
                        Path="Data.Connected"
                        Source="{StaticResource CameraInfo}" />
                </PriorityBinding>
            </WrapPanel.Visibility>
            <TextBlock
                Margin="7.5,0,7.5,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Text="|" />
            <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblGain}" />
            <ComboBox
                Margin="5,0,0,0"
                DisplayMemberPath="Text"
                IsSynchronizedWithCurrentItem="True"
                SelectedValuePath="Text">
                <ComboBox.ItemsSource>
                    <CompositeCollection>
                        <TextBlock Text="{Binding Source={StaticResource CameraInfo}, Path=Data.DefaultGain, UpdateSourceTrigger=PropertyChanged, StringFormat=({0})}" />
                        <CollectionContainer Collection="{Binding Source={StaticResource CameraInfo}, Path=Data.Gains, Converter={StaticResource IntListToTextBlockListConverter}}" />
                    </CompositeCollection>
                </ComboBox.ItemsSource>
                <ComboBox.SelectedValue>
                    <MultiBinding
                        Converter="{StaticResource MinusOneToBaseValueConverter}"
                        Mode="TwoWay"
                        UpdateSourceTrigger="PropertyChanged">
                        <Binding
                            Mode="TwoWay"
                            Path="Gain"
                            UpdateSourceTrigger="PropertyChanged" />
                        <Binding
                            Mode="OneWay"
                            Path="Data.DefaultGain"
                            Source="{StaticResource CameraInfo}"
                            UpdateSourceTrigger="PropertyChanged" />
                    </MultiBinding>
                </ComboBox.SelectedValue>
            </ComboBox>
        </WrapPanel>

        <!--  Free Gain  -->
        <WrapPanel Orientation="Horizontal">
            <WrapPanel.Visibility>
                <PriorityBinding FallbackValue="Visible">
                    <Binding
                        Converter="{StaticResource InverseCollectionContainsItemsToVisibilityConverter}"
                        Path="Data.Gains"
                        Source="{StaticResource CameraInfo}" />
                </PriorityBinding>
            </WrapPanel.Visibility>
            <TextBlock
                Margin="7.5,0,7.5,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Text="|" />

            <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblGain}" />
            <local:ConstantHintControl 
                Margin="8,1,10,5" 
                Expr="{Binding Path=GainExpr, Mode=TwoWay}"
                Valu="{Binding Path=Gain, Mode=TwoWay}"
                Default="{Binding Mode=OneWay, Path=Data.DefaultGain, Source={StaticResource CameraInfo}, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource CameraDefaultValueConverter}}" 
                Validate="ValidateGain"
                />

        </WrapPanel>

        <!--  Offset  -->
        <WrapPanel Orientation="Horizontal">
            <WrapPanel.Visibility>
                <MultiBinding Converter="{StaticResource BooleanOrToVisibilityCollapsedMultiConverter}" FallbackValue="Visible">
                    <Binding
                        Converter="{StaticResource InverseBooleanConverter}"
                        Path="Data.Connected"
                        Source="{StaticResource CameraInfo}" />
                    <Binding Path="Data.CanSetOffset" Source="{StaticResource CameraInfo}" />
                </MultiBinding>
            </WrapPanel.Visibility>
            <TextBlock
                Margin="7.5,0,7.5,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Text="|" />
            <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblOffset}" />
            <local:ConstantHintControl 
                Margin="8,1,10,5" 
                Expr="{Binding Path=OffsetExpr, Mode=TwoWay}"
                Valu="{Binding Path=Offset, Mode=TwoWay}"
                Default="{Binding Mode=OneWay, Path=Data.DefaultOffset, Source={StaticResource CameraInfo}, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource CameraDefaultValueConverter}}" 
                Validate="ValidateOffset"
            />
        </WrapPanel>
    </WrapPanel>

    <DataTemplate x:Key="WhenPlugin.When.TakeExposure_Mini">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{Binding ExposureTime}" />
                    <TextBlock VerticalAlignment="Center" Text="s" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
        </mini:MiniSequenceItem>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:TakeExposure}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <WrapPanel Orientation="Vertical">
                    <ContentPresenter Content="{StaticResource TakeExposureDetails}" />
                </WrapPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.TakeManyExposures_Mini" DataType="{x:Type local:TakeManyExposures}">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                    <TextBlock VerticalAlignment="Center" Text="x" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Items[0].ExposureTime}" />
                    <TextBlock VerticalAlignment="Center" Text="s" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
            <mini:MiniSequenceItem.SequenceItemProgressContent>
                <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblProgress}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Conditions[0].CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center" Text="/" />
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemProgressContent>
        </mini:MiniSequenceItem>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:TakeManyExposures}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <WrapPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="#" />
                    <local:ExprControl Label="#" Exp="{Binding IterExpr}" />
                    <ContentPresenter Content="{StaticResource TakeExposureDetails}" DataContext="{Binding Items[0]}" />
                </WrapPanel>
            </nina:SequenceBlockView.SequenceItemContent>
            <nina:SequenceBlockView.SequenceItemProgressContent>
                <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblProgress}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Conditions[0].CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center" Text="/" />
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemProgressContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.SmartExposure_Mini" DataType="{x:Type local:SmartExposure}">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                    <TextBlock VerticalAlignment="Center" Text="x" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Items[0].Filter.Name}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Items[1].ExposureTime}" />
                    <TextBlock VerticalAlignment="Center" Text="s" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
            <mini:MiniSequenceItem.SequenceItemProgressContent>
                <WrapPanel VerticalAlignment="Center" Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblProgress}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Conditions[0].CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center" Text="/" />
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                </WrapPanel>
            </mini:MiniSequenceItem.SequenceItemProgressContent>
        </mini:MiniSequenceItem>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:SmartExposure}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>

                <WrapPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="#" />
                    <local:ConstantControl 
                        Margin="0,0,10,5" 
                        Expr="{Binding Path=IterationsExpr, Mode=TwoWay}"
                        Valu="{Binding Path=IterationCount, Mode=TwoWay}" 
                        Type="Integer"/>
                    <TextBlock
                        Margin="7.5,0,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="|" />
                    <ContentPresenter Content="{StaticResource TakeExposureDetails}" DataContext="{Binding Items[1]}" />

                    <TextBlock
                        Margin="7.5,0,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="|" />
                    <TextBlock
                        Margin="5,-3,0,0"
                        VerticalAlignment="Center"
                        Text="{ns:Loc LblFilter}" />
                    <ComboBox
                        Margin="5,-3,0,0"
                        IsEditable="True"
                        DisplayMemberPath="Name"
                        Text="{Binding FilterExpr, Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                        >
                        <ComboBox.Resources>
                            <CollectionViewSource x:Key="Filters" Source="{Binding Source={StaticResource ProfileService}, Path=ActiveProfile.FilterWheelSettings.FilterWheelFilters}" />
                        </ComboBox.Resources>
                        <ComboBox.ItemsSource>
                            <CompositeCollection>
                                <x:Static Member="filter:NullFilter.Instance" />
                                <CollectionContainer Collection="{Binding Source={StaticResource Filters}}" />
                            </CompositeCollection>
                        </ComboBox.ItemsSource>
                    </ComboBox>
                    <local:ConstantComboControl
                        Visibility="{Binding CVFilter, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                        Margin="0,-7,10,5"
                        Expr="{Binding Path=FilterExpr, Mode=TwoWay}"
                        Valu="{Binding Path=Filter, Mode=TwoWay}"
                        Type="Integer"
                        Combo="{Binding Path=FilterNames, Mode=TwoWay}"/>
                    <TextBlock
                        Margin="7.5,-5,7.5,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Text="|" />
                    <TextBlock
                        Margin="5,-3,0,0"
                        VerticalAlignment="Center"
                        Text="{ns:Loc LblDitherEveryNoFrame}" />
                    <local:ConstantControl 
                        Margin="0,-7,10,5" 
                        Expr="{Binding Path=DitherExpr, Mode=TwoWay}" 
                        Valu="{Binding Path=DitherCount, Mode=TwoWay}" 
                        Type="Integer"
                        />

                </WrapPanel>
            </nina:SequenceBlockView.SequenceItemContent>
            <nina:SequenceBlockView.SequenceItemProgressContent>
                <WrapPanel VerticalAlignment="Center" Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{ns:Loc LblProgress}" />
                    <TextBlock
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding Conditions[0].CompletedIterations}" />
                    <TextBlock VerticalAlignment="Center" Text="/" />
                    <TextBlock VerticalAlignment="Center" Text="{Binding Conditions[0].Iterations}" />
                </WrapPanel>
            </nina:SequenceBlockView.SequenceItemProgressContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.IfSafe_Mini" DataType="{x:Type local:IfSafe}">
        <mini:MiniContainer DataContext="{Binding Instructions}">
            <mini:MiniContainer.Content>
                <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                    <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                </Grid>
            </mini:MiniContainer.Content>
        </mini:MiniContainer>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.IfUnsafe_Mini" DataType="{x:Type local:IfUnsafe}">
        <mini:MiniContainer DataContext="{Binding Instructions}">
            <mini:MiniContainer.Content>
                <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                    <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                </Grid>
            </mini:MiniContainer.Content>
        </mini:MiniContainer>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.WhenUnsafe_Mini" DataType="{x:Type local:WhenUnsafe}">
        <mini:MiniContainer DataContext="{Binding Instructions}">
            <mini:MiniContainer.Content>
                <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                    <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                </Grid>
            </mini:MiniContainer.Content>
        </mini:MiniContainer>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.RepeatUntilAllSucceed_Mini" DataType="{x:Type local:RepeatUntilAllSucceed}">
        <mini:MiniContainer DataContext="{Binding Instructions}">
            <mini:MiniContainer.Content>
                <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                    <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                </Grid>
            </mini:MiniContainer.Content>
        </mini:MiniContainer>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.TemplateByReference_Mini" DataType="{x:Type local:TemplateByReference}">
        <mini:MiniContainer DataContext="{Binding Instructions}">
            <mini:MiniContainer.Content>
                <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                    <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                </Grid>
            </mini:MiniContainer.Content>
        </mini:MiniContainer>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.IfConstant_Mini" DataType="{x:Type local:IfConstant}">
        <mini:MiniContainer DataContext="{Binding Instructions}">
            <mini:MiniContainer.Content>
                <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding Instructions}">
                    <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                </Grid>
            </mini:MiniContainer.Content>
        </mini:MiniContainer>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:PassMeridian}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock
                        Margin="0,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding FlipStatus}" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>


    <DataTemplate DataType="{x:Type local:DoFlip}">
        <nina:SequenceBlockView DataContext="{Binding}">
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock
                        Margin="0,0,0,0"
                        VerticalAlignment="Center"
                        Text="{Binding FlipStatus}" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:DIYMeridianFlipTrigger}">
        <Border>
            <Border.Resources>
                <wpfutil:SharedResourceDictionary Source="/NINA.Sequencer;component/Resources/Styles/ProgressStyle.xaml" />
            </Border.Resources>
            <i:Interaction.Behaviors>
                <!--  Drop area above and below the Sequence Container  -->
                <behaviors:DragOverBehavior
                  AllowDragCenter="False"
                  DragAboveSize="25"
                  DragBelowSize="15" />
            </i:Interaction.Behaviors>
            <ninactrl:DetachingExpander>
                <ninactrl:DetachingExpander.Header>
                    <Grid
                      MinHeight="35"
                      Margin="0"
                      HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType=ContentPresenter}, Mode=OneWayToSource}"
                      Background="{StaticResource SecondaryBackgroundBrush}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock 
                                   MinHeight="25"
                                   Margin="10,10,20,0"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center"
                                   Text="DIY Meridian Flip Trigger" />
                                <Border
                                   Width="20"
                                   Height="20"
                                   Margin="5,0,15,0"
                                   Background="{StaticResource NotificationErrorBrush}"
                                   BorderBrush="Transparent"
                                   CornerRadius="10">
                                    <Border.Visibility>
                                        <PriorityBinding>
                                            <Binding
                                           Converter="{StaticResource ZeroToVisibilityConverter}"
                                           FallbackValue="Collapsed"
                                           Path="Issues.Count" />
                                        </PriorityBinding>
                                    </Border.Visibility>
                                    <Path
                                       HorizontalAlignment="Right"
                                       Data="{StaticResource ExclamationCircledSVG}"
                                       Fill="{StaticResource ButtonForegroundBrush}"
                                       Stretch="Uniform" />
                                    <Border.ToolTip>
                                        <ItemsControl ItemsSource="{Binding Issues}" />
                                    </Border.ToolTip>
                                </Border>
                                <StackPanel Orientation="Vertical">
                                    <StackPanel Orientation="Horizontal" Margin="0,10,0,10">
                                        <TextBlock VerticalAlignment="Center" Text="Pause before meridian:" />
                                        <TextBox
                                   MinWidth="40"
                                   Margin="5,0,10,0"
                                   Text="{Binding PauseTimeBeforeMeridian}"
                                   VerticalAlignment="Center"
                                   TextAlignment="Center" />
                                        <TextBlock VerticalAlignment="Center" Text="Minutes after meridian:" />
                                        <TextBox
                                   MinWidth="40"
                                    Margin="5,0,10,0"
                                   Text="{Binding MinutesAfterMeridian}"
                                   TextAlignment="Center" />
                                        <TextBlock VerticalAlignment="Center" Text="Max minutes after meridian:" />
                                        <TextBox
                                   MinWidth="40"
                                  Margin="5,0,10,0"
                                   Text="{Binding MaxMinutesAfterMeridian}"
                                   TextAlignment="Center" />
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock
                                   MinWidth="50"
                                   MinHeight="35"
                                   VerticalAlignment="Center">
                                            <TextBlock.Inlines>
                                                <Run FontWeight="Bold" Text="{Binding FlipStatus}" />
                                            </TextBlock.Inlines>
                                        </TextBlock>
                                    </StackPanel>
                                </StackPanel>
                            </StackPanel>
                        </Grid>
                        <Border Grid.Column="1" Background="{StaticResource SecondaryBackgroundBrush}">
                            <ContentPresenter
                              Margin="2,0,10,0"
                              HorizontalAlignment="Right"
                              Content="{Binding}"
                              DockPanel.Dock="Right"
                              Style="{StaticResource ProgressPresenter}" />
                        </Border>
                        <Border
                           x:Name="ButtonCommands"
                           Grid.Column="2"
                           HorizontalAlignment="Stretch"
                           Background="{StaticResource SecondaryBackgroundBrush}">
                            <Control Template="{StaticResource PowerupsButtons}" />
                        </Border>
                    </Grid>
                </ninactrl:DetachingExpander.Header>
                <StackPanel Grid.Row="1" Orientation="Vertical">
                    <Border
                       MinHeight="35"
                       Margin="0,0,0,0"
                       BorderBrush="{StaticResource BorderBrush}"
                       BorderThickness="1">
                        <Grid Background="{StaticResource BackgroundBrush}" DataContext="{Binding TriggerRunner}">
                            <ItemsControl MinHeight="35" ItemsSource="{Binding Items}" />
                            <TextBlock
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontStyle="Italic"
                                Opacity="0.4"
                                Text="Instructions will go here..."
                               Visibility="{Binding Items.Count, Converter={StaticResource InverseZeroToVisibilityConverter}}" />
                            <i:Interaction.Behaviors>
                                <behaviors:DragOverBehavior DragAboveSize="0" DragBelowSize="0" />
                                <behaviors:DropIntoBehavior AllowedDragDropTypesString="NINA.Sequencer.Container.ISequenceContainer;NINA.Sequencer.SequenceItem.ISequenceItem;NINA.Sequencer.TemplatedSequenceContainer" OnDropCommand="DropIntoCommand" />
                            </i:Interaction.Behaviors>
                        </Grid>
                    </Border>
                </StackPanel>
            </ninactrl:DetachingExpander>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="WhenPlugin.When.FlipRotator_Mini">
        <mini:MiniSequenceItem>
            <mini:MiniSequenceItem.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="{Binding MechanicalPosition}" />
                    <TextBlock VerticalAlignment="Center" Text="°" />
                </StackPanel>
            </mini:MiniSequenceItem.SequenceItemContent>
        </mini:MiniSequenceItem>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type local:FlipRotator}">
        <nina:SequenceBlockView>
            <nina:SequenceBlockView.SequenceItemContent>
                <StackPanel Orientation="Horizontal">
                    <TextBlock VerticalAlignment="Center" Text="Mechanical Position: " />
                    <TextBlock Margin="5,0,0,0" VerticalAlignment="Center" Text="{Binding MechanicalPosition}" />
                </StackPanel>
            </nina:SequenceBlockView.SequenceItemContent>
        </nina:SequenceBlockView>
    </DataTemplate>


</ResourceDictionary>